/* automatically generated by rust-bindgen 0.60.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &[u8; 1usize] = b"\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING: u32 = 32;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const __GNUC_VA_LIST: u32 = 1;
pub const JNI_FALSE: u32 = 0;
pub const JNI_TRUE: u32 = 1;
pub const JNI_OK: u32 = 0;
pub const JNI_ERR: i32 = -1;
pub const JNI_EDETACHED: i32 = -2;
pub const JNI_EVERSION: i32 = -3;
pub const JNI_ENOMEM: i32 = -4;
pub const JNI_EEXIST: i32 = -5;
pub const JNI_EINVAL: i32 = -6;
pub const JNI_COMMIT: u32 = 1;
pub const JNI_ABORT: u32 = 2;
pub const JNI_VERSION_1_1: u32 = 65537;
pub const JNI_VERSION_1_2: u32 = 65538;
pub const JNI_VERSION_1_4: u32 = 65540;
pub const JNI_VERSION_1_6: u32 = 65542;
pub const JNI_VERSION_1_8: u32 = 65544;
pub const JNI_VERSION_9: u32 = 589824;
pub const JNI_VERSION_10: u32 = 655360;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    fn test_field__locale_pctype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_data_public>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._locale_pctype) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_data_public),
                "::",
                stringify!(_locale_pctype)
            )
        );
    }
    test_field__locale_pctype();
    fn test_field__locale_mb_cur_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_data_public>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._locale_mb_cur_max) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_data_public),
                "::",
                stringify!(_locale_mb_cur_max)
            )
        );
    }
    test_field__locale_mb_cur_max();
    fn test_field__locale_lc_codepage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_data_public>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._locale_lc_codepage) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_data_public),
                "::",
                stringify!(_locale_lc_codepage)
            )
        );
    }
    test_field__locale_lc_codepage();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    fn test_field_locinfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_pointers>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_pointers),
                "::",
                stringify!(locinfo)
            )
        );
    }
    test_field_locinfo();
    fn test_field_mbcinfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_pointers>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_pointers),
                "::",
                stringify!(mbcinfo)
            )
        );
    }
    test_field_mbcinfo();
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    fn test_field__Wchar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_Mbstatet>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Wchar) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_Mbstatet),
                "::",
                stringify!(_Wchar)
            )
        );
    }
    test_field__Wchar();
    fn test_field__Byte() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_Mbstatet>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Byte) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_Mbstatet),
                "::",
                stringify!(_Byte)
            )
        );
    }
    test_field__Byte();
    fn test_field__State() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_Mbstatet>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._State) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(_Mbstatet),
                "::",
                stringify!(_State)
            )
        );
    }
    test_field__State();
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__iobuf() {
    assert_eq!(
        ::std::mem::size_of::<_iobuf>(),
        8usize,
        concat!("Size of: ", stringify!(_iobuf))
    );
    assert_eq!(
        ::std::mem::align_of::<_iobuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_iobuf))
    );
    fn test_field__Placeholder() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_iobuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Placeholder) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_iobuf),
                "::",
                stringify!(_Placeholder)
            )
        );
    }
    test_field__Placeholder();
}
pub type FILE = _iobuf;
extern "C" {
    pub fn __acrt_iob_func(_Ix: ::std::os::raw::c_uint) -> *mut FILE;
}
extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fgetws(
        _Buffer: *mut wchar_t,
        _BufferCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(_Buffer: *const wchar_t, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getws_s(_Buffer: *mut wchar_t, _BufferCount: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn putwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _putws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen(_FileName: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfreopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfsopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wpopen(_Command: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wremove(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtempnam(_Directory: *const wchar_t, _FilePrefix: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut wchar_t, _BufferCount: size_t) -> errno_t;
}
extern "C" {
    pub fn _wtmpnam(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _putwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _MaxCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = ::std::os::raw::c_longlong;
extern "C" {
    pub fn _get_stream_buffer_pointers(
        _Stream: *mut FILE,
        _Base: *mut *mut *mut ::std::os::raw::c_char,
        _Pointer: *mut *mut *mut ::std::os::raw::c_char,
        _Count: *mut *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
extern "C" {
    pub fn fopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn fread_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: size_t,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn freopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn gets_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _Size: rsize_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
extern "C" {
    pub fn tmpnam_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t) -> errno_t;
}
extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn feof(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fputc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(
        _Buffer: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn freopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fsopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fwrite(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn getc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrorMessage: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _popen(
        _Command: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn putc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(_Buffer: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putw(_Word: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        _OldFileName: *const ::std::os::raw::c_char,
        _NewFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
extern "C" {
    pub fn _rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn _setmaxstdio(_Maximum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setvbuf(
        _Stream: *mut FILE,
        _Buffer: *mut ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
        _Size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tempnam(
        _DirectoryName: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fread_nolock(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fread_nolock_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: size_t,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fseek_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _fwrite_nolock(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ungetc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p__commode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _Arglist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _MaxCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        _Directory: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Format: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(_Ch: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmtmp() -> ::std::os::raw::c_int;
}
pub type __gnuc_va_list = __builtin_va_list;
pub type jint = ::std::os::raw::c_long;
pub type jlong = ::std::os::raw::c_longlong;
pub type jbyte = ::std::os::raw::c_schar;
pub type jboolean = ::std::os::raw::c_uchar;
pub type jchar = ::std::os::raw::c_ushort;
pub type jshort = ::std::os::raw::c_short;
pub type jfloat = f32;
pub type jdouble = f64;
pub type jsize = jint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jobject {
    _unused: [u8; 0],
}
pub type jobject = *mut _jobject;
pub type jclass = jobject;
pub type jthrowable = jobject;
pub type jstring = jobject;
pub type jarray = jobject;
pub type jbooleanArray = jarray;
pub type jbyteArray = jarray;
pub type jcharArray = jarray;
pub type jshortArray = jarray;
pub type jintArray = jarray;
pub type jlongArray = jarray;
pub type jfloatArray = jarray;
pub type jdoubleArray = jarray;
pub type jobjectArray = jarray;
pub type jweak = jobject;
#[repr(C)]
#[derive(Copy, Clone)]
pub union jvalue {
    pub z: jboolean,
    pub b: jbyte,
    pub c: jchar,
    pub s: jshort,
    pub i: jint,
    pub j: jlong,
    pub f: jfloat,
    pub d: jdouble,
    pub l: jobject,
}
#[test]
fn bindgen_test_layout_jvalue() {
    assert_eq!(
        ::std::mem::size_of::<jvalue>(),
        8usize,
        concat!("Size of: ", stringify!(jvalue))
    );
    assert_eq!(
        ::std::mem::align_of::<jvalue>(),
        8usize,
        concat!("Alignment of ", stringify!(jvalue))
    );
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvalue>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(jvalue), "::", stringify!(z))
        );
    }
    test_field_z();
    fn test_field_b() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvalue>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(jvalue), "::", stringify!(b))
        );
    }
    test_field_b();
    fn test_field_c() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvalue>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(jvalue), "::", stringify!(c))
        );
    }
    test_field_c();
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvalue>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(jvalue), "::", stringify!(s))
        );
    }
    test_field_s();
    fn test_field_i() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvalue>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).i) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(jvalue), "::", stringify!(i))
        );
    }
    test_field_i();
    fn test_field_j() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvalue>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).j) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(jvalue), "::", stringify!(j))
        );
    }
    test_field_j();
    fn test_field_f() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvalue>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(jvalue), "::", stringify!(f))
        );
    }
    test_field_f();
    fn test_field_d() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvalue>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(jvalue), "::", stringify!(d))
        );
    }
    test_field_d();
    fn test_field_l() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvalue>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).l) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(jvalue), "::", stringify!(l))
        );
    }
    test_field_l();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jfieldID {
    _unused: [u8; 0],
}
pub type jfieldID = *mut _jfieldID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jmethodID {
    _unused: [u8; 0],
}
pub type jmethodID = *mut _jmethodID;
pub const _jobjectType_JNIInvalidRefType: _jobjectType = 0;
pub const _jobjectType_JNILocalRefType: _jobjectType = 1;
pub const _jobjectType_JNIGlobalRefType: _jobjectType = 2;
pub const _jobjectType_JNIWeakGlobalRefType: _jobjectType = 3;
pub type _jobjectType = ::std::os::raw::c_int;
pub use self::_jobjectType as jobjectRefType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JNINativeMethod {
    pub name: *mut ::std::os::raw::c_char,
    pub signature: *mut ::std::os::raw::c_char,
    pub fnPtr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_JNINativeMethod() {
    assert_eq!(
        ::std::mem::size_of::<JNINativeMethod>(),
        24usize,
        concat!("Size of: ", stringify!(JNINativeMethod))
    );
    assert_eq!(
        ::std::mem::align_of::<JNINativeMethod>(),
        8usize,
        concat!("Alignment of ", stringify!(JNINativeMethod))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeMethod>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeMethod),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_signature() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeMethod>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).signature) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeMethod),
                "::",
                stringify!(signature)
            )
        );
    }
    test_field_signature();
    fn test_field_fnPtr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeMethod>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fnPtr) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeMethod),
                "::",
                stringify!(fnPtr)
            )
        );
    }
    test_field_fnPtr();
}
pub type JNIEnv = *const JNINativeInterface_;
pub type JavaVM = *const JNIInvokeInterface_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JNINativeInterface_ {
    pub reserved0: *mut ::std::os::raw::c_void,
    pub reserved1: *mut ::std::os::raw::c_void,
    pub reserved2: *mut ::std::os::raw::c_void,
    pub reserved3: *mut ::std::os::raw::c_void,
    pub GetVersion: ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv) -> jint>,
    pub DefineClass: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            name: *const ::std::os::raw::c_char,
            loader: jobject,
            buf: *const jbyte,
            len: jsize,
        ) -> jclass,
    >,
    pub FindClass: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, name: *const ::std::os::raw::c_char) -> jclass,
    >,
    pub FromReflectedMethod:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, method: jobject) -> jmethodID>,
    pub FromReflectedField:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, field: jobject) -> jfieldID>,
    pub ToReflectedMethod: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            cls: jclass,
            methodID: jmethodID,
            isStatic: jboolean,
        ) -> jobject,
    >,
    pub GetSuperclass:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, sub: jclass) -> jclass>,
    pub IsAssignableFrom: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, sub: jclass, sup: jclass) -> jboolean,
    >,
    pub ToReflectedField: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            cls: jclass,
            fieldID: jfieldID,
            isStatic: jboolean,
        ) -> jobject,
    >,
    pub Throw:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jthrowable) -> jint>,
    pub ThrowNew: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            msg: *const ::std::os::raw::c_char,
        ) -> jint,
    >,
    pub ExceptionOccurred:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv) -> jthrowable>,
    pub ExceptionDescribe: ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv)>,
    pub ExceptionClear: ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv)>,
    pub FatalError: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, msg: *const ::std::os::raw::c_char),
    >,
    pub PushLocalFrame:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, capacity: jint) -> jint>,
    pub PopLocalFrame:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, result: jobject) -> jobject>,
    pub NewGlobalRef:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, lobj: jobject) -> jobject>,
    pub DeleteGlobalRef:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, gref: jobject)>,
    pub DeleteLocalRef: ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject)>,
    pub IsSameObject: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj1: jobject, obj2: jobject) -> jboolean,
    >,
    pub NewLocalRef:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, ref_: jobject) -> jobject>,
    pub EnsureLocalCapacity:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, capacity: jint) -> jint>,
    pub AllocObject:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass) -> jobject>,
    pub NewObject: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jobject,
    >,
    pub NewObjectV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jobject,
    >,
    pub NewObjectA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jobject,
    >,
    pub GetObjectClass:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject) -> jclass>,
    pub IsInstanceOf: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass) -> jboolean,
    >,
    pub GetMethodID: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            name: *const ::std::os::raw::c_char,
            sig: *const ::std::os::raw::c_char,
        ) -> jmethodID,
    >,
    pub CallObjectMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jobject,
    >,
    pub CallObjectMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: va_list,
        ) -> jobject,
    >,
    pub CallObjectMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jobject,
    >,
    pub CallBooleanMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jboolean,
    >,
    pub CallBooleanMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: va_list,
        ) -> jboolean,
    >,
    pub CallBooleanMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jboolean,
    >,
    pub CallByteMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jbyte,
    >,
    pub CallByteMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: va_list,
        ) -> jbyte,
    >,
    pub CallByteMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jbyte,
    >,
    pub CallCharMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jchar,
    >,
    pub CallCharMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: va_list,
        ) -> jchar,
    >,
    pub CallCharMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jchar,
    >,
    pub CallShortMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jshort,
    >,
    pub CallShortMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: va_list,
        ) -> jshort,
    >,
    pub CallShortMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jshort,
    >,
    pub CallIntMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jint,
    >,
    pub CallIntMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: va_list,
        ) -> jint,
    >,
    pub CallIntMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jint,
    >,
    pub CallLongMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jlong,
    >,
    pub CallLongMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: va_list,
        ) -> jlong,
    >,
    pub CallLongMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jlong,
    >,
    pub CallFloatMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jfloat,
    >,
    pub CallFloatMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: va_list,
        ) -> jfloat,
    >,
    pub CallFloatMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jfloat,
    >,
    pub CallDoubleMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jdouble,
    >,
    pub CallDoubleMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: va_list,
        ) -> jdouble,
    >,
    pub CallDoubleMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jdouble,
    >,
    pub CallVoidMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...),
    >,
    pub CallVoidMethodV: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, args: va_list),
    >,
    pub CallVoidMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: *const jvalue,
        ),
    >,
    pub CallNonvirtualObjectMethod: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            ...
        ) -> jobject,
    >,
    pub CallNonvirtualObjectMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jobject,
    >,
    pub CallNonvirtualObjectMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jobject,
    >,
    pub CallNonvirtualBooleanMethod: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            ...
        ) -> jboolean,
    >,
    pub CallNonvirtualBooleanMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jboolean,
    >,
    pub CallNonvirtualBooleanMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jboolean,
    >,
    pub CallNonvirtualByteMethod: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            ...
        ) -> jbyte,
    >,
    pub CallNonvirtualByteMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jbyte,
    >,
    pub CallNonvirtualByteMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jbyte,
    >,
    pub CallNonvirtualCharMethod: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            ...
        ) -> jchar,
    >,
    pub CallNonvirtualCharMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jchar,
    >,
    pub CallNonvirtualCharMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jchar,
    >,
    pub CallNonvirtualShortMethod: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            ...
        ) -> jshort,
    >,
    pub CallNonvirtualShortMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jshort,
    >,
    pub CallNonvirtualShortMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jshort,
    >,
    pub CallNonvirtualIntMethod: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            ...
        ) -> jint,
    >,
    pub CallNonvirtualIntMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jint,
    >,
    pub CallNonvirtualIntMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jint,
    >,
    pub CallNonvirtualLongMethod: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            ...
        ) -> jlong,
    >,
    pub CallNonvirtualLongMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jlong,
    >,
    pub CallNonvirtualLongMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jlong,
    >,
    pub CallNonvirtualFloatMethod: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            ...
        ) -> jfloat,
    >,
    pub CallNonvirtualFloatMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jfloat,
    >,
    pub CallNonvirtualFloatMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jfloat,
    >,
    pub CallNonvirtualDoubleMethod: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            ...
        ) -> jdouble,
    >,
    pub CallNonvirtualDoubleMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jdouble,
    >,
    pub CallNonvirtualDoubleMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jdouble,
    >,
    pub CallNonvirtualVoidMethod: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            ...
        ),
    >,
    pub CallNonvirtualVoidMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ),
    >,
    pub CallNonvirtualVoidMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ),
    >,
    pub GetFieldID: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            name: *const ::std::os::raw::c_char,
            sig: *const ::std::os::raw::c_char,
        ) -> jfieldID,
    >,
    pub GetObjectField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jobject,
    >,
    pub GetBooleanField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jboolean,
    >,
    pub GetByteField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jbyte,
    >,
    pub GetCharField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jchar,
    >,
    pub GetShortField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jshort,
    >,
    pub GetIntField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jint,
    >,
    pub GetLongField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jlong,
    >,
    pub GetFloatField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jfloat,
    >,
    pub GetDoubleField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jdouble,
    >,
    pub SetObjectField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jobject),
    >,
    pub SetBooleanField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jboolean),
    >,
    pub SetByteField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jbyte),
    >,
    pub SetCharField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jchar),
    >,
    pub SetShortField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jshort),
    >,
    pub SetIntField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jint),
    >,
    pub SetLongField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jlong),
    >,
    pub SetFloatField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jfloat),
    >,
    pub SetDoubleField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jdouble),
    >,
    pub GetStaticMethodID: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            name: *const ::std::os::raw::c_char,
            sig: *const ::std::os::raw::c_char,
        ) -> jmethodID,
    >,
    pub CallStaticObjectMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jobject,
    >,
    pub CallStaticObjectMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jobject,
    >,
    pub CallStaticObjectMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jobject,
    >,
    pub CallStaticBooleanMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jboolean,
    >,
    pub CallStaticBooleanMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jboolean,
    >,
    pub CallStaticBooleanMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jboolean,
    >,
    pub CallStaticByteMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jbyte,
    >,
    pub CallStaticByteMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jbyte,
    >,
    pub CallStaticByteMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jbyte,
    >,
    pub CallStaticCharMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jchar,
    >,
    pub CallStaticCharMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jchar,
    >,
    pub CallStaticCharMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jchar,
    >,
    pub CallStaticShortMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jshort,
    >,
    pub CallStaticShortMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jshort,
    >,
    pub CallStaticShortMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jshort,
    >,
    pub CallStaticIntMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jint,
    >,
    pub CallStaticIntMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jint,
    >,
    pub CallStaticIntMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jint,
    >,
    pub CallStaticLongMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jlong,
    >,
    pub CallStaticLongMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jlong,
    >,
    pub CallStaticLongMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jlong,
    >,
    pub CallStaticFloatMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jfloat,
    >,
    pub CallStaticFloatMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jfloat,
    >,
    pub CallStaticFloatMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jfloat,
    >,
    pub CallStaticDoubleMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jdouble,
    >,
    pub CallStaticDoubleMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jdouble,
    >,
    pub CallStaticDoubleMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jdouble,
    >,
    pub CallStaticVoidMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, cls: jclass, methodID: jmethodID, ...),
    >,
    pub CallStaticVoidMethodV: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, cls: jclass, methodID: jmethodID, args: va_list),
    >,
    pub CallStaticVoidMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            cls: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ),
    >,
    pub GetStaticFieldID: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            name: *const ::std::os::raw::c_char,
            sig: *const ::std::os::raw::c_char,
        ) -> jfieldID,
    >,
    pub GetStaticObjectField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jobject,
    >,
    pub GetStaticBooleanField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jboolean,
    >,
    pub GetStaticByteField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jbyte,
    >,
    pub GetStaticCharField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jchar,
    >,
    pub GetStaticShortField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jshort,
    >,
    pub GetStaticIntField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jint,
    >,
    pub GetStaticLongField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jlong,
    >,
    pub GetStaticFloatField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jfloat,
    >,
    pub GetStaticDoubleField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jdouble,
    >,
    pub SetStaticObjectField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jobject),
    >,
    pub SetStaticBooleanField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jboolean),
    >,
    pub SetStaticByteField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jbyte),
    >,
    pub SetStaticCharField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jchar),
    >,
    pub SetStaticShortField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jshort),
    >,
    pub SetStaticIntField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jint),
    >,
    pub SetStaticLongField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jlong),
    >,
    pub SetStaticFloatField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jfloat),
    >,
    pub SetStaticDoubleField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jdouble),
    >,
    pub NewString: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, unicode: *const jchar, len: jsize) -> jstring,
    >,
    pub GetStringLength:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, str_: jstring) -> jsize>,
    pub GetStringChars: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            str_: jstring,
            isCopy: *mut jboolean,
        ) -> *const jchar,
    >,
    pub ReleaseStringChars: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, str_: jstring, chars: *const jchar),
    >,
    pub NewStringUTF: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, utf: *const ::std::os::raw::c_char) -> jstring,
    >,
    pub GetStringUTFLength:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, str_: jstring) -> jsize>,
    pub GetStringUTFChars: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            str_: jstring,
            isCopy: *mut jboolean,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub ReleaseStringUTFChars: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, str_: jstring, chars: *const ::std::os::raw::c_char),
    >,
    pub GetArrayLength:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jarray) -> jsize>,
    pub NewObjectArray: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            len: jsize,
            clazz: jclass,
            init: jobject,
        ) -> jobjectArray,
    >,
    pub GetObjectArrayElement: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, array: jobjectArray, index: jsize) -> jobject,
    >,
    pub SetObjectArrayElement: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, array: jobjectArray, index: jsize, val: jobject),
    >,
    pub NewBooleanArray:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, len: jsize) -> jbooleanArray>,
    pub NewByteArray:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, len: jsize) -> jbyteArray>,
    pub NewCharArray:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, len: jsize) -> jcharArray>,
    pub NewShortArray:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, len: jsize) -> jshortArray>,
    pub NewIntArray:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, len: jsize) -> jintArray>,
    pub NewLongArray:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, len: jsize) -> jlongArray>,
    pub NewFloatArray:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, len: jsize) -> jfloatArray>,
    pub NewDoubleArray:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, len: jsize) -> jdoubleArray>,
    pub GetBooleanArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jbooleanArray,
            isCopy: *mut jboolean,
        ) -> *mut jboolean,
    >,
    pub GetByteArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jbyteArray,
            isCopy: *mut jboolean,
        ) -> *mut jbyte,
    >,
    pub GetCharArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jcharArray,
            isCopy: *mut jboolean,
        ) -> *mut jchar,
    >,
    pub GetShortArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jshortArray,
            isCopy: *mut jboolean,
        ) -> *mut jshort,
    >,
    pub GetIntArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jintArray,
            isCopy: *mut jboolean,
        ) -> *mut jint,
    >,
    pub GetLongArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jlongArray,
            isCopy: *mut jboolean,
        ) -> *mut jlong,
    >,
    pub GetFloatArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jfloatArray,
            isCopy: *mut jboolean,
        ) -> *mut jfloat,
    >,
    pub GetDoubleArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jdoubleArray,
            isCopy: *mut jboolean,
        ) -> *mut jdouble,
    >,
    pub ReleaseBooleanArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jbooleanArray,
            elems: *mut jboolean,
            mode: jint,
        ),
    >,
    pub ReleaseByteArrayElements: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, array: jbyteArray, elems: *mut jbyte, mode: jint),
    >,
    pub ReleaseCharArrayElements: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, array: jcharArray, elems: *mut jchar, mode: jint),
    >,
    pub ReleaseShortArrayElements: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, array: jshortArray, elems: *mut jshort, mode: jint),
    >,
    pub ReleaseIntArrayElements: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, array: jintArray, elems: *mut jint, mode: jint),
    >,
    pub ReleaseLongArrayElements: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, array: jlongArray, elems: *mut jlong, mode: jint),
    >,
    pub ReleaseFloatArrayElements: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, array: jfloatArray, elems: *mut jfloat, mode: jint),
    >,
    pub ReleaseDoubleArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jdoubleArray,
            elems: *mut jdouble,
            mode: jint,
        ),
    >,
    pub GetBooleanArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jbooleanArray,
            start: jsize,
            l: jsize,
            buf: *mut jboolean,
        ),
    >,
    pub GetByteArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jbyteArray,
            start: jsize,
            len: jsize,
            buf: *mut jbyte,
        ),
    >,
    pub GetCharArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jcharArray,
            start: jsize,
            len: jsize,
            buf: *mut jchar,
        ),
    >,
    pub GetShortArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jshortArray,
            start: jsize,
            len: jsize,
            buf: *mut jshort,
        ),
    >,
    pub GetIntArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jintArray,
            start: jsize,
            len: jsize,
            buf: *mut jint,
        ),
    >,
    pub GetLongArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jlongArray,
            start: jsize,
            len: jsize,
            buf: *mut jlong,
        ),
    >,
    pub GetFloatArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jfloatArray,
            start: jsize,
            len: jsize,
            buf: *mut jfloat,
        ),
    >,
    pub GetDoubleArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jdoubleArray,
            start: jsize,
            len: jsize,
            buf: *mut jdouble,
        ),
    >,
    pub SetBooleanArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jbooleanArray,
            start: jsize,
            l: jsize,
            buf: *const jboolean,
        ),
    >,
    pub SetByteArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jbyteArray,
            start: jsize,
            len: jsize,
            buf: *const jbyte,
        ),
    >,
    pub SetCharArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jcharArray,
            start: jsize,
            len: jsize,
            buf: *const jchar,
        ),
    >,
    pub SetShortArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jshortArray,
            start: jsize,
            len: jsize,
            buf: *const jshort,
        ),
    >,
    pub SetIntArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jintArray,
            start: jsize,
            len: jsize,
            buf: *const jint,
        ),
    >,
    pub SetLongArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jlongArray,
            start: jsize,
            len: jsize,
            buf: *const jlong,
        ),
    >,
    pub SetFloatArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jfloatArray,
            start: jsize,
            len: jsize,
            buf: *const jfloat,
        ),
    >,
    pub SetDoubleArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jdoubleArray,
            start: jsize,
            len: jsize,
            buf: *const jdouble,
        ),
    >,
    pub RegisterNatives: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methods: *const JNINativeMethod,
            nMethods: jint,
        ) -> jint,
    >,
    pub UnregisterNatives:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass) -> jint>,
    pub MonitorEnter:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject) -> jint>,
    pub MonitorExit:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject) -> jint>,
    pub GetJavaVM:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, vm: *mut *mut JavaVM) -> jint>,
    pub GetStringRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            str_: jstring,
            start: jsize,
            len: jsize,
            buf: *mut jchar,
        ),
    >,
    pub GetStringUTFRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            str_: jstring,
            start: jsize,
            len: jsize,
            buf: *mut ::std::os::raw::c_char,
        ),
    >,
    pub GetPrimitiveArrayCritical: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jarray,
            isCopy: *mut jboolean,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub ReleasePrimitiveArrayCritical: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jarray,
            carray: *mut ::std::os::raw::c_void,
            mode: jint,
        ),
    >,
    pub GetStringCritical: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            string: jstring,
            isCopy: *mut jboolean,
        ) -> *const jchar,
    >,
    pub ReleaseStringCritical: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, string: jstring, cstring: *const jchar),
    >,
    pub NewWeakGlobalRef:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject) -> jweak>,
    pub DeleteWeakGlobalRef:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, ref_: jweak)>,
    pub ExceptionCheck: ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv) -> jboolean>,
    pub NewDirectByteBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            address: *mut ::std::os::raw::c_void,
            capacity: jlong,
        ) -> jobject,
    >,
    pub GetDirectBufferAddress: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, buf: jobject) -> *mut ::std::os::raw::c_void,
    >,
    pub GetDirectBufferCapacity:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, buf: jobject) -> jlong>,
    pub GetObjectRefType: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject) -> jobjectRefType,
    >,
    pub GetModule:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass) -> jobject>,
}
#[test]
fn bindgen_test_layout_JNINativeInterface_() {
    assert_eq!(
        ::std::mem::size_of::<JNINativeInterface_>(),
        1872usize,
        concat!("Size of: ", stringify!(JNINativeInterface_))
    );
    assert_eq!(
        ::std::mem::align_of::<JNINativeInterface_>(),
        8usize,
        concat!("Alignment of ", stringify!(JNINativeInterface_))
    );
    fn test_field_reserved0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(reserved0)
            )
        );
    }
    test_field_reserved0();
    fn test_field_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(reserved1)
            )
        );
    }
    test_field_reserved1();
    fn test_field_reserved2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(reserved2)
            )
        );
    }
    test_field_reserved2();
    fn test_field_reserved3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved3) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(reserved3)
            )
        );
    }
    test_field_reserved3();
    fn test_field_GetVersion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetVersion) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetVersion)
            )
        );
    }
    test_field_GetVersion();
    fn test_field_DefineClass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DefineClass) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(DefineClass)
            )
        );
    }
    test_field_DefineClass();
    fn test_field_FindClass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FindClass) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(FindClass)
            )
        );
    }
    test_field_FindClass();
    fn test_field_FromReflectedMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FromReflectedMethod) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(FromReflectedMethod)
            )
        );
    }
    test_field_FromReflectedMethod();
    fn test_field_FromReflectedField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FromReflectedField) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(FromReflectedField)
            )
        );
    }
    test_field_FromReflectedField();
    fn test_field_ToReflectedMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ToReflectedMethod) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(ToReflectedMethod)
            )
        );
    }
    test_field_ToReflectedMethod();
    fn test_field_GetSuperclass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSuperclass) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetSuperclass)
            )
        );
    }
    test_field_GetSuperclass();
    fn test_field_IsAssignableFrom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsAssignableFrom) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(IsAssignableFrom)
            )
        );
    }
    test_field_IsAssignableFrom();
    fn test_field_ToReflectedField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ToReflectedField) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(ToReflectedField)
            )
        );
    }
    test_field_ToReflectedField();
    fn test_field_Throw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Throw) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(Throw)
            )
        );
    }
    test_field_Throw();
    fn test_field_ThrowNew() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ThrowNew) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(ThrowNew)
            )
        );
    }
    test_field_ThrowNew();
    fn test_field_ExceptionOccurred() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ExceptionOccurred) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(ExceptionOccurred)
            )
        );
    }
    test_field_ExceptionOccurred();
    fn test_field_ExceptionDescribe() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ExceptionDescribe) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(ExceptionDescribe)
            )
        );
    }
    test_field_ExceptionDescribe();
    fn test_field_ExceptionClear() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ExceptionClear) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(ExceptionClear)
            )
        );
    }
    test_field_ExceptionClear();
    fn test_field_FatalError() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FatalError) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(FatalError)
            )
        );
    }
    test_field_FatalError();
    fn test_field_PushLocalFrame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PushLocalFrame) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(PushLocalFrame)
            )
        );
    }
    test_field_PushLocalFrame();
    fn test_field_PopLocalFrame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PopLocalFrame) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(PopLocalFrame)
            )
        );
    }
    test_field_PopLocalFrame();
    fn test_field_NewGlobalRef() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NewGlobalRef) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(NewGlobalRef)
            )
        );
    }
    test_field_NewGlobalRef();
    fn test_field_DeleteGlobalRef() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DeleteGlobalRef) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(DeleteGlobalRef)
            )
        );
    }
    test_field_DeleteGlobalRef();
    fn test_field_DeleteLocalRef() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DeleteLocalRef) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(DeleteLocalRef)
            )
        );
    }
    test_field_DeleteLocalRef();
    fn test_field_IsSameObject() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsSameObject) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(IsSameObject)
            )
        );
    }
    test_field_IsSameObject();
    fn test_field_NewLocalRef() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NewLocalRef) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(NewLocalRef)
            )
        );
    }
    test_field_NewLocalRef();
    fn test_field_EnsureLocalCapacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).EnsureLocalCapacity) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(EnsureLocalCapacity)
            )
        );
    }
    test_field_EnsureLocalCapacity();
    fn test_field_AllocObject() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AllocObject) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(AllocObject)
            )
        );
    }
    test_field_AllocObject();
    fn test_field_NewObject() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NewObject) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(NewObject)
            )
        );
    }
    test_field_NewObject();
    fn test_field_NewObjectV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NewObjectV) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(NewObjectV)
            )
        );
    }
    test_field_NewObjectV();
    fn test_field_NewObjectA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NewObjectA) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(NewObjectA)
            )
        );
    }
    test_field_NewObjectA();
    fn test_field_GetObjectClass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetObjectClass) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetObjectClass)
            )
        );
    }
    test_field_GetObjectClass();
    fn test_field_IsInstanceOf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsInstanceOf) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(IsInstanceOf)
            )
        );
    }
    test_field_IsInstanceOf();
    fn test_field_GetMethodID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetMethodID) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetMethodID)
            )
        );
    }
    test_field_GetMethodID();
    fn test_field_CallObjectMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallObjectMethod) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallObjectMethod)
            )
        );
    }
    test_field_CallObjectMethod();
    fn test_field_CallObjectMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallObjectMethodV) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallObjectMethodV)
            )
        );
    }
    test_field_CallObjectMethodV();
    fn test_field_CallObjectMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallObjectMethodA) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallObjectMethodA)
            )
        );
    }
    test_field_CallObjectMethodA();
    fn test_field_CallBooleanMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallBooleanMethod) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallBooleanMethod)
            )
        );
    }
    test_field_CallBooleanMethod();
    fn test_field_CallBooleanMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallBooleanMethodV) as usize - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallBooleanMethodV)
            )
        );
    }
    test_field_CallBooleanMethodV();
    fn test_field_CallBooleanMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallBooleanMethodA) as usize - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallBooleanMethodA)
            )
        );
    }
    test_field_CallBooleanMethodA();
    fn test_field_CallByteMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallByteMethod) as usize - ptr as usize
            },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallByteMethod)
            )
        );
    }
    test_field_CallByteMethod();
    fn test_field_CallByteMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallByteMethodV) as usize - ptr as usize
            },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallByteMethodV)
            )
        );
    }
    test_field_CallByteMethodV();
    fn test_field_CallByteMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallByteMethodA) as usize - ptr as usize
            },
            336usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallByteMethodA)
            )
        );
    }
    test_field_CallByteMethodA();
    fn test_field_CallCharMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallCharMethod) as usize - ptr as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallCharMethod)
            )
        );
    }
    test_field_CallCharMethod();
    fn test_field_CallCharMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallCharMethodV) as usize - ptr as usize
            },
            352usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallCharMethodV)
            )
        );
    }
    test_field_CallCharMethodV();
    fn test_field_CallCharMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallCharMethodA) as usize - ptr as usize
            },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallCharMethodA)
            )
        );
    }
    test_field_CallCharMethodA();
    fn test_field_CallShortMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallShortMethod) as usize - ptr as usize
            },
            368usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallShortMethod)
            )
        );
    }
    test_field_CallShortMethod();
    fn test_field_CallShortMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallShortMethodV) as usize - ptr as usize
            },
            376usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallShortMethodV)
            )
        );
    }
    test_field_CallShortMethodV();
    fn test_field_CallShortMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallShortMethodA) as usize - ptr as usize
            },
            384usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallShortMethodA)
            )
        );
    }
    test_field_CallShortMethodA();
    fn test_field_CallIntMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallIntMethod) as usize - ptr as usize
            },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallIntMethod)
            )
        );
    }
    test_field_CallIntMethod();
    fn test_field_CallIntMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallIntMethodV) as usize - ptr as usize
            },
            400usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallIntMethodV)
            )
        );
    }
    test_field_CallIntMethodV();
    fn test_field_CallIntMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallIntMethodA) as usize - ptr as usize
            },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallIntMethodA)
            )
        );
    }
    test_field_CallIntMethodA();
    fn test_field_CallLongMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallLongMethod) as usize - ptr as usize
            },
            416usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallLongMethod)
            )
        );
    }
    test_field_CallLongMethod();
    fn test_field_CallLongMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallLongMethodV) as usize - ptr as usize
            },
            424usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallLongMethodV)
            )
        );
    }
    test_field_CallLongMethodV();
    fn test_field_CallLongMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallLongMethodA) as usize - ptr as usize
            },
            432usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallLongMethodA)
            )
        );
    }
    test_field_CallLongMethodA();
    fn test_field_CallFloatMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallFloatMethod) as usize - ptr as usize
            },
            440usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallFloatMethod)
            )
        );
    }
    test_field_CallFloatMethod();
    fn test_field_CallFloatMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallFloatMethodV) as usize - ptr as usize
            },
            448usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallFloatMethodV)
            )
        );
    }
    test_field_CallFloatMethodV();
    fn test_field_CallFloatMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallFloatMethodA) as usize - ptr as usize
            },
            456usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallFloatMethodA)
            )
        );
    }
    test_field_CallFloatMethodA();
    fn test_field_CallDoubleMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallDoubleMethod) as usize - ptr as usize
            },
            464usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallDoubleMethod)
            )
        );
    }
    test_field_CallDoubleMethod();
    fn test_field_CallDoubleMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallDoubleMethodV) as usize - ptr as usize
            },
            472usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallDoubleMethodV)
            )
        );
    }
    test_field_CallDoubleMethodV();
    fn test_field_CallDoubleMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallDoubleMethodA) as usize - ptr as usize
            },
            480usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallDoubleMethodA)
            )
        );
    }
    test_field_CallDoubleMethodA();
    fn test_field_CallVoidMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallVoidMethod) as usize - ptr as usize
            },
            488usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallVoidMethod)
            )
        );
    }
    test_field_CallVoidMethod();
    fn test_field_CallVoidMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallVoidMethodV) as usize - ptr as usize
            },
            496usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallVoidMethodV)
            )
        );
    }
    test_field_CallVoidMethodV();
    fn test_field_CallVoidMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallVoidMethodA) as usize - ptr as usize
            },
            504usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallVoidMethodA)
            )
        );
    }
    test_field_CallVoidMethodA();
    fn test_field_CallNonvirtualObjectMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualObjectMethod) as usize - ptr as usize
            },
            512usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualObjectMethod)
            )
        );
    }
    test_field_CallNonvirtualObjectMethod();
    fn test_field_CallNonvirtualObjectMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualObjectMethodV) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualObjectMethodV)
            )
        );
    }
    test_field_CallNonvirtualObjectMethodV();
    fn test_field_CallNonvirtualObjectMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualObjectMethodA) as usize - ptr as usize
            },
            528usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualObjectMethodA)
            )
        );
    }
    test_field_CallNonvirtualObjectMethodA();
    fn test_field_CallNonvirtualBooleanMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualBooleanMethod) as usize - ptr as usize
            },
            536usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualBooleanMethod)
            )
        );
    }
    test_field_CallNonvirtualBooleanMethod();
    fn test_field_CallNonvirtualBooleanMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualBooleanMethodV) as usize - ptr as usize
            },
            544usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualBooleanMethodV)
            )
        );
    }
    test_field_CallNonvirtualBooleanMethodV();
    fn test_field_CallNonvirtualBooleanMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualBooleanMethodA) as usize - ptr as usize
            },
            552usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualBooleanMethodA)
            )
        );
    }
    test_field_CallNonvirtualBooleanMethodA();
    fn test_field_CallNonvirtualByteMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualByteMethod) as usize - ptr as usize
            },
            560usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualByteMethod)
            )
        );
    }
    test_field_CallNonvirtualByteMethod();
    fn test_field_CallNonvirtualByteMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualByteMethodV) as usize - ptr as usize
            },
            568usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualByteMethodV)
            )
        );
    }
    test_field_CallNonvirtualByteMethodV();
    fn test_field_CallNonvirtualByteMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualByteMethodA) as usize - ptr as usize
            },
            576usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualByteMethodA)
            )
        );
    }
    test_field_CallNonvirtualByteMethodA();
    fn test_field_CallNonvirtualCharMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualCharMethod) as usize - ptr as usize
            },
            584usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualCharMethod)
            )
        );
    }
    test_field_CallNonvirtualCharMethod();
    fn test_field_CallNonvirtualCharMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualCharMethodV) as usize - ptr as usize
            },
            592usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualCharMethodV)
            )
        );
    }
    test_field_CallNonvirtualCharMethodV();
    fn test_field_CallNonvirtualCharMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualCharMethodA) as usize - ptr as usize
            },
            600usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualCharMethodA)
            )
        );
    }
    test_field_CallNonvirtualCharMethodA();
    fn test_field_CallNonvirtualShortMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualShortMethod) as usize - ptr as usize
            },
            608usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualShortMethod)
            )
        );
    }
    test_field_CallNonvirtualShortMethod();
    fn test_field_CallNonvirtualShortMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualShortMethodV) as usize - ptr as usize
            },
            616usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualShortMethodV)
            )
        );
    }
    test_field_CallNonvirtualShortMethodV();
    fn test_field_CallNonvirtualShortMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualShortMethodA) as usize - ptr as usize
            },
            624usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualShortMethodA)
            )
        );
    }
    test_field_CallNonvirtualShortMethodA();
    fn test_field_CallNonvirtualIntMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualIntMethod) as usize - ptr as usize
            },
            632usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualIntMethod)
            )
        );
    }
    test_field_CallNonvirtualIntMethod();
    fn test_field_CallNonvirtualIntMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualIntMethodV) as usize - ptr as usize
            },
            640usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualIntMethodV)
            )
        );
    }
    test_field_CallNonvirtualIntMethodV();
    fn test_field_CallNonvirtualIntMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualIntMethodA) as usize - ptr as usize
            },
            648usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualIntMethodA)
            )
        );
    }
    test_field_CallNonvirtualIntMethodA();
    fn test_field_CallNonvirtualLongMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualLongMethod) as usize - ptr as usize
            },
            656usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualLongMethod)
            )
        );
    }
    test_field_CallNonvirtualLongMethod();
    fn test_field_CallNonvirtualLongMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualLongMethodV) as usize - ptr as usize
            },
            664usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualLongMethodV)
            )
        );
    }
    test_field_CallNonvirtualLongMethodV();
    fn test_field_CallNonvirtualLongMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualLongMethodA) as usize - ptr as usize
            },
            672usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualLongMethodA)
            )
        );
    }
    test_field_CallNonvirtualLongMethodA();
    fn test_field_CallNonvirtualFloatMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualFloatMethod) as usize - ptr as usize
            },
            680usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualFloatMethod)
            )
        );
    }
    test_field_CallNonvirtualFloatMethod();
    fn test_field_CallNonvirtualFloatMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualFloatMethodV) as usize - ptr as usize
            },
            688usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualFloatMethodV)
            )
        );
    }
    test_field_CallNonvirtualFloatMethodV();
    fn test_field_CallNonvirtualFloatMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualFloatMethodA) as usize - ptr as usize
            },
            696usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualFloatMethodA)
            )
        );
    }
    test_field_CallNonvirtualFloatMethodA();
    fn test_field_CallNonvirtualDoubleMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualDoubleMethod) as usize - ptr as usize
            },
            704usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualDoubleMethod)
            )
        );
    }
    test_field_CallNonvirtualDoubleMethod();
    fn test_field_CallNonvirtualDoubleMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualDoubleMethodV) as usize - ptr as usize
            },
            712usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualDoubleMethodV)
            )
        );
    }
    test_field_CallNonvirtualDoubleMethodV();
    fn test_field_CallNonvirtualDoubleMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualDoubleMethodA) as usize - ptr as usize
            },
            720usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualDoubleMethodA)
            )
        );
    }
    test_field_CallNonvirtualDoubleMethodA();
    fn test_field_CallNonvirtualVoidMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualVoidMethod) as usize - ptr as usize
            },
            728usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualVoidMethod)
            )
        );
    }
    test_field_CallNonvirtualVoidMethod();
    fn test_field_CallNonvirtualVoidMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualVoidMethodV) as usize - ptr as usize
            },
            736usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualVoidMethodV)
            )
        );
    }
    test_field_CallNonvirtualVoidMethodV();
    fn test_field_CallNonvirtualVoidMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallNonvirtualVoidMethodA) as usize - ptr as usize
            },
            744usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallNonvirtualVoidMethodA)
            )
        );
    }
    test_field_CallNonvirtualVoidMethodA();
    fn test_field_GetFieldID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetFieldID) as usize - ptr as usize
            },
            752usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetFieldID)
            )
        );
    }
    test_field_GetFieldID();
    fn test_field_GetObjectField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetObjectField) as usize - ptr as usize
            },
            760usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetObjectField)
            )
        );
    }
    test_field_GetObjectField();
    fn test_field_GetBooleanField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetBooleanField) as usize - ptr as usize
            },
            768usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetBooleanField)
            )
        );
    }
    test_field_GetBooleanField();
    fn test_field_GetByteField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetByteField) as usize - ptr as usize
            },
            776usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetByteField)
            )
        );
    }
    test_field_GetByteField();
    fn test_field_GetCharField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetCharField) as usize - ptr as usize
            },
            784usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetCharField)
            )
        );
    }
    test_field_GetCharField();
    fn test_field_GetShortField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetShortField) as usize - ptr as usize
            },
            792usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetShortField)
            )
        );
    }
    test_field_GetShortField();
    fn test_field_GetIntField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetIntField) as usize - ptr as usize
            },
            800usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetIntField)
            )
        );
    }
    test_field_GetIntField();
    fn test_field_GetLongField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetLongField) as usize - ptr as usize
            },
            808usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetLongField)
            )
        );
    }
    test_field_GetLongField();
    fn test_field_GetFloatField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetFloatField) as usize - ptr as usize
            },
            816usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetFloatField)
            )
        );
    }
    test_field_GetFloatField();
    fn test_field_GetDoubleField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDoubleField) as usize - ptr as usize
            },
            824usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetDoubleField)
            )
        );
    }
    test_field_GetDoubleField();
    fn test_field_SetObjectField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetObjectField) as usize - ptr as usize
            },
            832usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetObjectField)
            )
        );
    }
    test_field_SetObjectField();
    fn test_field_SetBooleanField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetBooleanField) as usize - ptr as usize
            },
            840usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetBooleanField)
            )
        );
    }
    test_field_SetBooleanField();
    fn test_field_SetByteField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetByteField) as usize - ptr as usize
            },
            848usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetByteField)
            )
        );
    }
    test_field_SetByteField();
    fn test_field_SetCharField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetCharField) as usize - ptr as usize
            },
            856usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetCharField)
            )
        );
    }
    test_field_SetCharField();
    fn test_field_SetShortField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetShortField) as usize - ptr as usize
            },
            864usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetShortField)
            )
        );
    }
    test_field_SetShortField();
    fn test_field_SetIntField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetIntField) as usize - ptr as usize
            },
            872usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetIntField)
            )
        );
    }
    test_field_SetIntField();
    fn test_field_SetLongField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetLongField) as usize - ptr as usize
            },
            880usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetLongField)
            )
        );
    }
    test_field_SetLongField();
    fn test_field_SetFloatField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetFloatField) as usize - ptr as usize
            },
            888usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetFloatField)
            )
        );
    }
    test_field_SetFloatField();
    fn test_field_SetDoubleField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetDoubleField) as usize - ptr as usize
            },
            896usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetDoubleField)
            )
        );
    }
    test_field_SetDoubleField();
    fn test_field_GetStaticMethodID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStaticMethodID) as usize - ptr as usize
            },
            904usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetStaticMethodID)
            )
        );
    }
    test_field_GetStaticMethodID();
    fn test_field_CallStaticObjectMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticObjectMethod) as usize - ptr as usize
            },
            912usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticObjectMethod)
            )
        );
    }
    test_field_CallStaticObjectMethod();
    fn test_field_CallStaticObjectMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticObjectMethodV) as usize - ptr as usize
            },
            920usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticObjectMethodV)
            )
        );
    }
    test_field_CallStaticObjectMethodV();
    fn test_field_CallStaticObjectMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticObjectMethodA) as usize - ptr as usize
            },
            928usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticObjectMethodA)
            )
        );
    }
    test_field_CallStaticObjectMethodA();
    fn test_field_CallStaticBooleanMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticBooleanMethod) as usize - ptr as usize
            },
            936usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticBooleanMethod)
            )
        );
    }
    test_field_CallStaticBooleanMethod();
    fn test_field_CallStaticBooleanMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticBooleanMethodV) as usize - ptr as usize
            },
            944usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticBooleanMethodV)
            )
        );
    }
    test_field_CallStaticBooleanMethodV();
    fn test_field_CallStaticBooleanMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticBooleanMethodA) as usize - ptr as usize
            },
            952usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticBooleanMethodA)
            )
        );
    }
    test_field_CallStaticBooleanMethodA();
    fn test_field_CallStaticByteMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticByteMethod) as usize - ptr as usize
            },
            960usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticByteMethod)
            )
        );
    }
    test_field_CallStaticByteMethod();
    fn test_field_CallStaticByteMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticByteMethodV) as usize - ptr as usize
            },
            968usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticByteMethodV)
            )
        );
    }
    test_field_CallStaticByteMethodV();
    fn test_field_CallStaticByteMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticByteMethodA) as usize - ptr as usize
            },
            976usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticByteMethodA)
            )
        );
    }
    test_field_CallStaticByteMethodA();
    fn test_field_CallStaticCharMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticCharMethod) as usize - ptr as usize
            },
            984usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticCharMethod)
            )
        );
    }
    test_field_CallStaticCharMethod();
    fn test_field_CallStaticCharMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticCharMethodV) as usize - ptr as usize
            },
            992usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticCharMethodV)
            )
        );
    }
    test_field_CallStaticCharMethodV();
    fn test_field_CallStaticCharMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticCharMethodA) as usize - ptr as usize
            },
            1000usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticCharMethodA)
            )
        );
    }
    test_field_CallStaticCharMethodA();
    fn test_field_CallStaticShortMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticShortMethod) as usize - ptr as usize
            },
            1008usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticShortMethod)
            )
        );
    }
    test_field_CallStaticShortMethod();
    fn test_field_CallStaticShortMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticShortMethodV) as usize - ptr as usize
            },
            1016usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticShortMethodV)
            )
        );
    }
    test_field_CallStaticShortMethodV();
    fn test_field_CallStaticShortMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticShortMethodA) as usize - ptr as usize
            },
            1024usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticShortMethodA)
            )
        );
    }
    test_field_CallStaticShortMethodA();
    fn test_field_CallStaticIntMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticIntMethod) as usize - ptr as usize
            },
            1032usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticIntMethod)
            )
        );
    }
    test_field_CallStaticIntMethod();
    fn test_field_CallStaticIntMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticIntMethodV) as usize - ptr as usize
            },
            1040usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticIntMethodV)
            )
        );
    }
    test_field_CallStaticIntMethodV();
    fn test_field_CallStaticIntMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticIntMethodA) as usize - ptr as usize
            },
            1048usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticIntMethodA)
            )
        );
    }
    test_field_CallStaticIntMethodA();
    fn test_field_CallStaticLongMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticLongMethod) as usize - ptr as usize
            },
            1056usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticLongMethod)
            )
        );
    }
    test_field_CallStaticLongMethod();
    fn test_field_CallStaticLongMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticLongMethodV) as usize - ptr as usize
            },
            1064usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticLongMethodV)
            )
        );
    }
    test_field_CallStaticLongMethodV();
    fn test_field_CallStaticLongMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticLongMethodA) as usize - ptr as usize
            },
            1072usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticLongMethodA)
            )
        );
    }
    test_field_CallStaticLongMethodA();
    fn test_field_CallStaticFloatMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticFloatMethod) as usize - ptr as usize
            },
            1080usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticFloatMethod)
            )
        );
    }
    test_field_CallStaticFloatMethod();
    fn test_field_CallStaticFloatMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticFloatMethodV) as usize - ptr as usize
            },
            1088usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticFloatMethodV)
            )
        );
    }
    test_field_CallStaticFloatMethodV();
    fn test_field_CallStaticFloatMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticFloatMethodA) as usize - ptr as usize
            },
            1096usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticFloatMethodA)
            )
        );
    }
    test_field_CallStaticFloatMethodA();
    fn test_field_CallStaticDoubleMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticDoubleMethod) as usize - ptr as usize
            },
            1104usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticDoubleMethod)
            )
        );
    }
    test_field_CallStaticDoubleMethod();
    fn test_field_CallStaticDoubleMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticDoubleMethodV) as usize - ptr as usize
            },
            1112usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticDoubleMethodV)
            )
        );
    }
    test_field_CallStaticDoubleMethodV();
    fn test_field_CallStaticDoubleMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticDoubleMethodA) as usize - ptr as usize
            },
            1120usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticDoubleMethodA)
            )
        );
    }
    test_field_CallStaticDoubleMethodA();
    fn test_field_CallStaticVoidMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticVoidMethod) as usize - ptr as usize
            },
            1128usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticVoidMethod)
            )
        );
    }
    test_field_CallStaticVoidMethod();
    fn test_field_CallStaticVoidMethodV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticVoidMethodV) as usize - ptr as usize
            },
            1136usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticVoidMethodV)
            )
        );
    }
    test_field_CallStaticVoidMethodV();
    fn test_field_CallStaticVoidMethodA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CallStaticVoidMethodA) as usize - ptr as usize
            },
            1144usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(CallStaticVoidMethodA)
            )
        );
    }
    test_field_CallStaticVoidMethodA();
    fn test_field_GetStaticFieldID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStaticFieldID) as usize - ptr as usize
            },
            1152usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetStaticFieldID)
            )
        );
    }
    test_field_GetStaticFieldID();
    fn test_field_GetStaticObjectField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStaticObjectField) as usize - ptr as usize
            },
            1160usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetStaticObjectField)
            )
        );
    }
    test_field_GetStaticObjectField();
    fn test_field_GetStaticBooleanField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStaticBooleanField) as usize - ptr as usize
            },
            1168usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetStaticBooleanField)
            )
        );
    }
    test_field_GetStaticBooleanField();
    fn test_field_GetStaticByteField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStaticByteField) as usize - ptr as usize
            },
            1176usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetStaticByteField)
            )
        );
    }
    test_field_GetStaticByteField();
    fn test_field_GetStaticCharField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStaticCharField) as usize - ptr as usize
            },
            1184usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetStaticCharField)
            )
        );
    }
    test_field_GetStaticCharField();
    fn test_field_GetStaticShortField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStaticShortField) as usize - ptr as usize
            },
            1192usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetStaticShortField)
            )
        );
    }
    test_field_GetStaticShortField();
    fn test_field_GetStaticIntField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStaticIntField) as usize - ptr as usize
            },
            1200usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetStaticIntField)
            )
        );
    }
    test_field_GetStaticIntField();
    fn test_field_GetStaticLongField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStaticLongField) as usize - ptr as usize
            },
            1208usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetStaticLongField)
            )
        );
    }
    test_field_GetStaticLongField();
    fn test_field_GetStaticFloatField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStaticFloatField) as usize - ptr as usize
            },
            1216usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetStaticFloatField)
            )
        );
    }
    test_field_GetStaticFloatField();
    fn test_field_GetStaticDoubleField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStaticDoubleField) as usize - ptr as usize
            },
            1224usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetStaticDoubleField)
            )
        );
    }
    test_field_GetStaticDoubleField();
    fn test_field_SetStaticObjectField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetStaticObjectField) as usize - ptr as usize
            },
            1232usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetStaticObjectField)
            )
        );
    }
    test_field_SetStaticObjectField();
    fn test_field_SetStaticBooleanField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetStaticBooleanField) as usize - ptr as usize
            },
            1240usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetStaticBooleanField)
            )
        );
    }
    test_field_SetStaticBooleanField();
    fn test_field_SetStaticByteField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetStaticByteField) as usize - ptr as usize
            },
            1248usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetStaticByteField)
            )
        );
    }
    test_field_SetStaticByteField();
    fn test_field_SetStaticCharField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetStaticCharField) as usize - ptr as usize
            },
            1256usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetStaticCharField)
            )
        );
    }
    test_field_SetStaticCharField();
    fn test_field_SetStaticShortField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetStaticShortField) as usize - ptr as usize
            },
            1264usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetStaticShortField)
            )
        );
    }
    test_field_SetStaticShortField();
    fn test_field_SetStaticIntField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetStaticIntField) as usize - ptr as usize
            },
            1272usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetStaticIntField)
            )
        );
    }
    test_field_SetStaticIntField();
    fn test_field_SetStaticLongField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetStaticLongField) as usize - ptr as usize
            },
            1280usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetStaticLongField)
            )
        );
    }
    test_field_SetStaticLongField();
    fn test_field_SetStaticFloatField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetStaticFloatField) as usize - ptr as usize
            },
            1288usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetStaticFloatField)
            )
        );
    }
    test_field_SetStaticFloatField();
    fn test_field_SetStaticDoubleField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetStaticDoubleField) as usize - ptr as usize
            },
            1296usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetStaticDoubleField)
            )
        );
    }
    test_field_SetStaticDoubleField();
    fn test_field_NewString() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NewString) as usize - ptr as usize
            },
            1304usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(NewString)
            )
        );
    }
    test_field_NewString();
    fn test_field_GetStringLength() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStringLength) as usize - ptr as usize
            },
            1312usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetStringLength)
            )
        );
    }
    test_field_GetStringLength();
    fn test_field_GetStringChars() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStringChars) as usize - ptr as usize
            },
            1320usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetStringChars)
            )
        );
    }
    test_field_GetStringChars();
    fn test_field_ReleaseStringChars() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseStringChars) as usize - ptr as usize
            },
            1328usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(ReleaseStringChars)
            )
        );
    }
    test_field_ReleaseStringChars();
    fn test_field_NewStringUTF() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NewStringUTF) as usize - ptr as usize
            },
            1336usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(NewStringUTF)
            )
        );
    }
    test_field_NewStringUTF();
    fn test_field_GetStringUTFLength() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStringUTFLength) as usize - ptr as usize
            },
            1344usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetStringUTFLength)
            )
        );
    }
    test_field_GetStringUTFLength();
    fn test_field_GetStringUTFChars() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStringUTFChars) as usize - ptr as usize
            },
            1352usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetStringUTFChars)
            )
        );
    }
    test_field_GetStringUTFChars();
    fn test_field_ReleaseStringUTFChars() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseStringUTFChars) as usize - ptr as usize
            },
            1360usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(ReleaseStringUTFChars)
            )
        );
    }
    test_field_ReleaseStringUTFChars();
    fn test_field_GetArrayLength() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetArrayLength) as usize - ptr as usize
            },
            1368usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetArrayLength)
            )
        );
    }
    test_field_GetArrayLength();
    fn test_field_NewObjectArray() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NewObjectArray) as usize - ptr as usize
            },
            1376usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(NewObjectArray)
            )
        );
    }
    test_field_NewObjectArray();
    fn test_field_GetObjectArrayElement() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetObjectArrayElement) as usize - ptr as usize
            },
            1384usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetObjectArrayElement)
            )
        );
    }
    test_field_GetObjectArrayElement();
    fn test_field_SetObjectArrayElement() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetObjectArrayElement) as usize - ptr as usize
            },
            1392usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetObjectArrayElement)
            )
        );
    }
    test_field_SetObjectArrayElement();
    fn test_field_NewBooleanArray() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NewBooleanArray) as usize - ptr as usize
            },
            1400usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(NewBooleanArray)
            )
        );
    }
    test_field_NewBooleanArray();
    fn test_field_NewByteArray() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NewByteArray) as usize - ptr as usize
            },
            1408usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(NewByteArray)
            )
        );
    }
    test_field_NewByteArray();
    fn test_field_NewCharArray() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NewCharArray) as usize - ptr as usize
            },
            1416usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(NewCharArray)
            )
        );
    }
    test_field_NewCharArray();
    fn test_field_NewShortArray() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NewShortArray) as usize - ptr as usize
            },
            1424usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(NewShortArray)
            )
        );
    }
    test_field_NewShortArray();
    fn test_field_NewIntArray() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NewIntArray) as usize - ptr as usize
            },
            1432usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(NewIntArray)
            )
        );
    }
    test_field_NewIntArray();
    fn test_field_NewLongArray() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NewLongArray) as usize - ptr as usize
            },
            1440usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(NewLongArray)
            )
        );
    }
    test_field_NewLongArray();
    fn test_field_NewFloatArray() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NewFloatArray) as usize - ptr as usize
            },
            1448usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(NewFloatArray)
            )
        );
    }
    test_field_NewFloatArray();
    fn test_field_NewDoubleArray() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NewDoubleArray) as usize - ptr as usize
            },
            1456usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(NewDoubleArray)
            )
        );
    }
    test_field_NewDoubleArray();
    fn test_field_GetBooleanArrayElements() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetBooleanArrayElements) as usize - ptr as usize
            },
            1464usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetBooleanArrayElements)
            )
        );
    }
    test_field_GetBooleanArrayElements();
    fn test_field_GetByteArrayElements() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetByteArrayElements) as usize - ptr as usize
            },
            1472usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetByteArrayElements)
            )
        );
    }
    test_field_GetByteArrayElements();
    fn test_field_GetCharArrayElements() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetCharArrayElements) as usize - ptr as usize
            },
            1480usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetCharArrayElements)
            )
        );
    }
    test_field_GetCharArrayElements();
    fn test_field_GetShortArrayElements() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetShortArrayElements) as usize - ptr as usize
            },
            1488usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetShortArrayElements)
            )
        );
    }
    test_field_GetShortArrayElements();
    fn test_field_GetIntArrayElements() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetIntArrayElements) as usize - ptr as usize
            },
            1496usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetIntArrayElements)
            )
        );
    }
    test_field_GetIntArrayElements();
    fn test_field_GetLongArrayElements() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetLongArrayElements) as usize - ptr as usize
            },
            1504usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetLongArrayElements)
            )
        );
    }
    test_field_GetLongArrayElements();
    fn test_field_GetFloatArrayElements() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetFloatArrayElements) as usize - ptr as usize
            },
            1512usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetFloatArrayElements)
            )
        );
    }
    test_field_GetFloatArrayElements();
    fn test_field_GetDoubleArrayElements() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDoubleArrayElements) as usize - ptr as usize
            },
            1520usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetDoubleArrayElements)
            )
        );
    }
    test_field_GetDoubleArrayElements();
    fn test_field_ReleaseBooleanArrayElements() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseBooleanArrayElements) as usize - ptr as usize
            },
            1528usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(ReleaseBooleanArrayElements)
            )
        );
    }
    test_field_ReleaseBooleanArrayElements();
    fn test_field_ReleaseByteArrayElements() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseByteArrayElements) as usize - ptr as usize
            },
            1536usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(ReleaseByteArrayElements)
            )
        );
    }
    test_field_ReleaseByteArrayElements();
    fn test_field_ReleaseCharArrayElements() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseCharArrayElements) as usize - ptr as usize
            },
            1544usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(ReleaseCharArrayElements)
            )
        );
    }
    test_field_ReleaseCharArrayElements();
    fn test_field_ReleaseShortArrayElements() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseShortArrayElements) as usize - ptr as usize
            },
            1552usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(ReleaseShortArrayElements)
            )
        );
    }
    test_field_ReleaseShortArrayElements();
    fn test_field_ReleaseIntArrayElements() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseIntArrayElements) as usize - ptr as usize
            },
            1560usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(ReleaseIntArrayElements)
            )
        );
    }
    test_field_ReleaseIntArrayElements();
    fn test_field_ReleaseLongArrayElements() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseLongArrayElements) as usize - ptr as usize
            },
            1568usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(ReleaseLongArrayElements)
            )
        );
    }
    test_field_ReleaseLongArrayElements();
    fn test_field_ReleaseFloatArrayElements() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseFloatArrayElements) as usize - ptr as usize
            },
            1576usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(ReleaseFloatArrayElements)
            )
        );
    }
    test_field_ReleaseFloatArrayElements();
    fn test_field_ReleaseDoubleArrayElements() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseDoubleArrayElements) as usize - ptr as usize
            },
            1584usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(ReleaseDoubleArrayElements)
            )
        );
    }
    test_field_ReleaseDoubleArrayElements();
    fn test_field_GetBooleanArrayRegion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetBooleanArrayRegion) as usize - ptr as usize
            },
            1592usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetBooleanArrayRegion)
            )
        );
    }
    test_field_GetBooleanArrayRegion();
    fn test_field_GetByteArrayRegion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetByteArrayRegion) as usize - ptr as usize
            },
            1600usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetByteArrayRegion)
            )
        );
    }
    test_field_GetByteArrayRegion();
    fn test_field_GetCharArrayRegion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetCharArrayRegion) as usize - ptr as usize
            },
            1608usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetCharArrayRegion)
            )
        );
    }
    test_field_GetCharArrayRegion();
    fn test_field_GetShortArrayRegion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetShortArrayRegion) as usize - ptr as usize
            },
            1616usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetShortArrayRegion)
            )
        );
    }
    test_field_GetShortArrayRegion();
    fn test_field_GetIntArrayRegion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetIntArrayRegion) as usize - ptr as usize
            },
            1624usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetIntArrayRegion)
            )
        );
    }
    test_field_GetIntArrayRegion();
    fn test_field_GetLongArrayRegion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetLongArrayRegion) as usize - ptr as usize
            },
            1632usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetLongArrayRegion)
            )
        );
    }
    test_field_GetLongArrayRegion();
    fn test_field_GetFloatArrayRegion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetFloatArrayRegion) as usize - ptr as usize
            },
            1640usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetFloatArrayRegion)
            )
        );
    }
    test_field_GetFloatArrayRegion();
    fn test_field_GetDoubleArrayRegion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDoubleArrayRegion) as usize - ptr as usize
            },
            1648usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetDoubleArrayRegion)
            )
        );
    }
    test_field_GetDoubleArrayRegion();
    fn test_field_SetBooleanArrayRegion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetBooleanArrayRegion) as usize - ptr as usize
            },
            1656usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetBooleanArrayRegion)
            )
        );
    }
    test_field_SetBooleanArrayRegion();
    fn test_field_SetByteArrayRegion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetByteArrayRegion) as usize - ptr as usize
            },
            1664usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetByteArrayRegion)
            )
        );
    }
    test_field_SetByteArrayRegion();
    fn test_field_SetCharArrayRegion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetCharArrayRegion) as usize - ptr as usize
            },
            1672usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetCharArrayRegion)
            )
        );
    }
    test_field_SetCharArrayRegion();
    fn test_field_SetShortArrayRegion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetShortArrayRegion) as usize - ptr as usize
            },
            1680usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetShortArrayRegion)
            )
        );
    }
    test_field_SetShortArrayRegion();
    fn test_field_SetIntArrayRegion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetIntArrayRegion) as usize - ptr as usize
            },
            1688usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetIntArrayRegion)
            )
        );
    }
    test_field_SetIntArrayRegion();
    fn test_field_SetLongArrayRegion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetLongArrayRegion) as usize - ptr as usize
            },
            1696usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetLongArrayRegion)
            )
        );
    }
    test_field_SetLongArrayRegion();
    fn test_field_SetFloatArrayRegion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetFloatArrayRegion) as usize - ptr as usize
            },
            1704usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetFloatArrayRegion)
            )
        );
    }
    test_field_SetFloatArrayRegion();
    fn test_field_SetDoubleArrayRegion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetDoubleArrayRegion) as usize - ptr as usize
            },
            1712usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(SetDoubleArrayRegion)
            )
        );
    }
    test_field_SetDoubleArrayRegion();
    fn test_field_RegisterNatives() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RegisterNatives) as usize - ptr as usize
            },
            1720usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(RegisterNatives)
            )
        );
    }
    test_field_RegisterNatives();
    fn test_field_UnregisterNatives() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UnregisterNatives) as usize - ptr as usize
            },
            1728usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(UnregisterNatives)
            )
        );
    }
    test_field_UnregisterNatives();
    fn test_field_MonitorEnter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MonitorEnter) as usize - ptr as usize
            },
            1736usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(MonitorEnter)
            )
        );
    }
    test_field_MonitorEnter();
    fn test_field_MonitorExit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MonitorExit) as usize - ptr as usize
            },
            1744usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(MonitorExit)
            )
        );
    }
    test_field_MonitorExit();
    fn test_field_GetJavaVM() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetJavaVM) as usize - ptr as usize
            },
            1752usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetJavaVM)
            )
        );
    }
    test_field_GetJavaVM();
    fn test_field_GetStringRegion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStringRegion) as usize - ptr as usize
            },
            1760usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetStringRegion)
            )
        );
    }
    test_field_GetStringRegion();
    fn test_field_GetStringUTFRegion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStringUTFRegion) as usize - ptr as usize
            },
            1768usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetStringUTFRegion)
            )
        );
    }
    test_field_GetStringUTFRegion();
    fn test_field_GetPrimitiveArrayCritical() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetPrimitiveArrayCritical) as usize - ptr as usize
            },
            1776usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetPrimitiveArrayCritical)
            )
        );
    }
    test_field_GetPrimitiveArrayCritical();
    fn test_field_ReleasePrimitiveArrayCritical() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleasePrimitiveArrayCritical) as usize - ptr as usize
            },
            1784usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(ReleasePrimitiveArrayCritical)
            )
        );
    }
    test_field_ReleasePrimitiveArrayCritical();
    fn test_field_GetStringCritical() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStringCritical) as usize - ptr as usize
            },
            1792usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetStringCritical)
            )
        );
    }
    test_field_GetStringCritical();
    fn test_field_ReleaseStringCritical() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseStringCritical) as usize - ptr as usize
            },
            1800usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(ReleaseStringCritical)
            )
        );
    }
    test_field_ReleaseStringCritical();
    fn test_field_NewWeakGlobalRef() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NewWeakGlobalRef) as usize - ptr as usize
            },
            1808usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(NewWeakGlobalRef)
            )
        );
    }
    test_field_NewWeakGlobalRef();
    fn test_field_DeleteWeakGlobalRef() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DeleteWeakGlobalRef) as usize - ptr as usize
            },
            1816usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(DeleteWeakGlobalRef)
            )
        );
    }
    test_field_DeleteWeakGlobalRef();
    fn test_field_ExceptionCheck() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ExceptionCheck) as usize - ptr as usize
            },
            1824usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(ExceptionCheck)
            )
        );
    }
    test_field_ExceptionCheck();
    fn test_field_NewDirectByteBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NewDirectByteBuffer) as usize - ptr as usize
            },
            1832usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(NewDirectByteBuffer)
            )
        );
    }
    test_field_NewDirectByteBuffer();
    fn test_field_GetDirectBufferAddress() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDirectBufferAddress) as usize - ptr as usize
            },
            1840usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetDirectBufferAddress)
            )
        );
    }
    test_field_GetDirectBufferAddress();
    fn test_field_GetDirectBufferCapacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDirectBufferCapacity) as usize - ptr as usize
            },
            1848usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetDirectBufferCapacity)
            )
        );
    }
    test_field_GetDirectBufferCapacity();
    fn test_field_GetObjectRefType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetObjectRefType) as usize - ptr as usize
            },
            1856usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetObjectRefType)
            )
        );
    }
    test_field_GetObjectRefType();
    fn test_field_GetModule() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNINativeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetModule) as usize - ptr as usize
            },
            1864usize,
            concat!(
                "Offset of field: ",
                stringify!(JNINativeInterface_),
                "::",
                stringify!(GetModule)
            )
        );
    }
    test_field_GetModule();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JNIEnv_ {
    pub functions: *const JNINativeInterface_,
}
#[test]
fn bindgen_test_layout_JNIEnv_() {
    assert_eq!(
        ::std::mem::size_of::<JNIEnv_>(),
        8usize,
        concat!("Size of: ", stringify!(JNIEnv_))
    );
    assert_eq!(
        ::std::mem::align_of::<JNIEnv_>(),
        8usize,
        concat!("Alignment of ", stringify!(JNIEnv_))
    );
    fn test_field_functions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNIEnv_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).functions) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(JNIEnv_),
                "::",
                stringify!(functions)
            )
        );
    }
    test_field_functions();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JavaVMOption {
    pub optionString: *mut ::std::os::raw::c_char,
    pub extraInfo: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_JavaVMOption() {
    assert_eq!(
        ::std::mem::size_of::<JavaVMOption>(),
        16usize,
        concat!("Size of: ", stringify!(JavaVMOption))
    );
    assert_eq!(
        ::std::mem::align_of::<JavaVMOption>(),
        8usize,
        concat!("Alignment of ", stringify!(JavaVMOption))
    );
    fn test_field_optionString() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JavaVMOption>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).optionString) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(JavaVMOption),
                "::",
                stringify!(optionString)
            )
        );
    }
    test_field_optionString();
    fn test_field_extraInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JavaVMOption>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).extraInfo) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(JavaVMOption),
                "::",
                stringify!(extraInfo)
            )
        );
    }
    test_field_extraInfo();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JavaVMInitArgs {
    pub version: jint,
    pub nOptions: jint,
    pub options: *mut JavaVMOption,
    pub ignoreUnrecognized: jboolean,
}
#[test]
fn bindgen_test_layout_JavaVMInitArgs() {
    assert_eq!(
        ::std::mem::size_of::<JavaVMInitArgs>(),
        24usize,
        concat!("Size of: ", stringify!(JavaVMInitArgs))
    );
    assert_eq!(
        ::std::mem::align_of::<JavaVMInitArgs>(),
        8usize,
        concat!("Alignment of ", stringify!(JavaVMInitArgs))
    );
    fn test_field_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JavaVMInitArgs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(JavaVMInitArgs),
                "::",
                stringify!(version)
            )
        );
    }
    test_field_version();
    fn test_field_nOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JavaVMInitArgs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nOptions) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(JavaVMInitArgs),
                "::",
                stringify!(nOptions)
            )
        );
    }
    test_field_nOptions();
    fn test_field_options() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JavaVMInitArgs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(JavaVMInitArgs),
                "::",
                stringify!(options)
            )
        );
    }
    test_field_options();
    fn test_field_ignoreUnrecognized() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JavaVMInitArgs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ignoreUnrecognized) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(JavaVMInitArgs),
                "::",
                stringify!(ignoreUnrecognized)
            )
        );
    }
    test_field_ignoreUnrecognized();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JavaVMAttachArgs {
    pub version: jint,
    pub name: *mut ::std::os::raw::c_char,
    pub group: jobject,
}
#[test]
fn bindgen_test_layout_JavaVMAttachArgs() {
    assert_eq!(
        ::std::mem::size_of::<JavaVMAttachArgs>(),
        24usize,
        concat!("Size of: ", stringify!(JavaVMAttachArgs))
    );
    assert_eq!(
        ::std::mem::align_of::<JavaVMAttachArgs>(),
        8usize,
        concat!("Alignment of ", stringify!(JavaVMAttachArgs))
    );
    fn test_field_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JavaVMAttachArgs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(JavaVMAttachArgs),
                "::",
                stringify!(version)
            )
        );
    }
    test_field_version();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JavaVMAttachArgs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(JavaVMAttachArgs),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_group() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JavaVMAttachArgs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).group) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(JavaVMAttachArgs),
                "::",
                stringify!(group)
            )
        );
    }
    test_field_group();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JNIInvokeInterface_ {
    pub reserved0: *mut ::std::os::raw::c_void,
    pub reserved1: *mut ::std::os::raw::c_void,
    pub reserved2: *mut ::std::os::raw::c_void,
    pub DestroyJavaVM: ::std::option::Option<unsafe extern "C" fn(vm: *mut JavaVM) -> jint>,
    pub AttachCurrentThread: ::std::option::Option<
        unsafe extern "C" fn(
            vm: *mut JavaVM,
            penv: *mut *mut ::std::os::raw::c_void,
            args: *mut ::std::os::raw::c_void,
        ) -> jint,
    >,
    pub DetachCurrentThread: ::std::option::Option<unsafe extern "C" fn(vm: *mut JavaVM) -> jint>,
    pub GetEnv: ::std::option::Option<
        unsafe extern "C" fn(
            vm: *mut JavaVM,
            penv: *mut *mut ::std::os::raw::c_void,
            version: jint,
        ) -> jint,
    >,
    pub AttachCurrentThreadAsDaemon: ::std::option::Option<
        unsafe extern "C" fn(
            vm: *mut JavaVM,
            penv: *mut *mut ::std::os::raw::c_void,
            args: *mut ::std::os::raw::c_void,
        ) -> jint,
    >,
}
#[test]
fn bindgen_test_layout_JNIInvokeInterface_() {
    assert_eq!(
        ::std::mem::size_of::<JNIInvokeInterface_>(),
        64usize,
        concat!("Size of: ", stringify!(JNIInvokeInterface_))
    );
    assert_eq!(
        ::std::mem::align_of::<JNIInvokeInterface_>(),
        8usize,
        concat!("Alignment of ", stringify!(JNIInvokeInterface_))
    );
    fn test_field_reserved0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNIInvokeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(JNIInvokeInterface_),
                "::",
                stringify!(reserved0)
            )
        );
    }
    test_field_reserved0();
    fn test_field_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNIInvokeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(JNIInvokeInterface_),
                "::",
                stringify!(reserved1)
            )
        );
    }
    test_field_reserved1();
    fn test_field_reserved2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNIInvokeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(JNIInvokeInterface_),
                "::",
                stringify!(reserved2)
            )
        );
    }
    test_field_reserved2();
    fn test_field_DestroyJavaVM() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNIInvokeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DestroyJavaVM) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(JNIInvokeInterface_),
                "::",
                stringify!(DestroyJavaVM)
            )
        );
    }
    test_field_DestroyJavaVM();
    fn test_field_AttachCurrentThread() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNIInvokeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AttachCurrentThread) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(JNIInvokeInterface_),
                "::",
                stringify!(AttachCurrentThread)
            )
        );
    }
    test_field_AttachCurrentThread();
    fn test_field_DetachCurrentThread() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNIInvokeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DetachCurrentThread) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(JNIInvokeInterface_),
                "::",
                stringify!(DetachCurrentThread)
            )
        );
    }
    test_field_DetachCurrentThread();
    fn test_field_GetEnv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNIInvokeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetEnv) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(JNIInvokeInterface_),
                "::",
                stringify!(GetEnv)
            )
        );
    }
    test_field_GetEnv();
    fn test_field_AttachCurrentThreadAsDaemon() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JNIInvokeInterface_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AttachCurrentThreadAsDaemon) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(JNIInvokeInterface_),
                "::",
                stringify!(AttachCurrentThreadAsDaemon)
            )
        );
    }
    test_field_AttachCurrentThreadAsDaemon();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JavaVM_ {
    pub functions: *const JNIInvokeInterface_,
}
#[test]
fn bindgen_test_layout_JavaVM_() {
    assert_eq!(
        ::std::mem::size_of::<JavaVM_>(),
        8usize,
        concat!("Size of: ", stringify!(JavaVM_))
    );
    assert_eq!(
        ::std::mem::align_of::<JavaVM_>(),
        8usize,
        concat!("Alignment of ", stringify!(JavaVM_))
    );
    fn test_field_functions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<JavaVM_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).functions) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(JavaVM_),
                "::",
                stringify!(functions)
            )
        );
    }
    test_field_functions();
}
extern "C" {
    pub fn JNI_GetDefaultJavaVMInitArgs(args: *mut ::std::os::raw::c_void) -> jint;
}
extern "C" {
    pub fn JNI_CreateJavaVM(
        pvm: *mut *mut JavaVM,
        penv: *mut *mut ::std::os::raw::c_void,
        args: *mut ::std::os::raw::c_void,
    ) -> jint;
}
extern "C" {
    pub fn JNI_GetCreatedJavaVMs(arg1: *mut *mut JavaVM, arg2: jsize, arg3: *mut jsize) -> jint;
}
extern "C" {
    pub fn JNI_OnLoad(vm: *mut JavaVM, reserved: *mut ::std::os::raw::c_void) -> jint;
}
extern "C" {
    pub fn JNI_OnUnload(vm: *mut JavaVM, reserved: *mut ::std::os::raw::c_void);
}
pub const JVMTI_VERSION_1: _bindgen_ty_1 = 805371904;
pub const JVMTI_VERSION_1_0: _bindgen_ty_1 = 805371904;
pub const JVMTI_VERSION_1_1: _bindgen_ty_1 = 805372160;
pub const JVMTI_VERSION_1_2: _bindgen_ty_1 = 805372416;
pub const JVMTI_VERSION_9: _bindgen_ty_1 = 805896192;
pub const JVMTI_VERSION_11: _bindgen_ty_1 = 806027264;
pub const JVMTI_VERSION: _bindgen_ty_1 = 806486016;
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
extern "C" {
    pub fn Agent_OnLoad(
        vm: *mut JavaVM,
        options: *mut ::std::os::raw::c_char,
        reserved: *mut ::std::os::raw::c_void,
    ) -> jint;
}
extern "C" {
    pub fn Agent_OnAttach(
        vm: *mut JavaVM,
        options: *mut ::std::os::raw::c_char,
        reserved: *mut ::std::os::raw::c_void,
    ) -> jint;
}
extern "C" {
    pub fn Agent_OnUnload(vm: *mut JavaVM);
}
pub type jvmtiEnv = *const jvmtiInterface_1_;
pub type jthread = jobject;
pub type jthreadGroup = jobject;
pub type jlocation = jlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jrawMonitorID {
    _unused: [u8; 0],
}
pub type jrawMonitorID = *mut _jrawMonitorID;
pub type jniNativeInterface = JNINativeInterface_;
pub const JVMTI_THREAD_STATE_ALIVE: _bindgen_ty_2 = 1;
pub const JVMTI_THREAD_STATE_TERMINATED: _bindgen_ty_2 = 2;
pub const JVMTI_THREAD_STATE_RUNNABLE: _bindgen_ty_2 = 4;
pub const JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER: _bindgen_ty_2 = 1024;
pub const JVMTI_THREAD_STATE_WAITING: _bindgen_ty_2 = 128;
pub const JVMTI_THREAD_STATE_WAITING_INDEFINITELY: _bindgen_ty_2 = 16;
pub const JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT: _bindgen_ty_2 = 32;
pub const JVMTI_THREAD_STATE_SLEEPING: _bindgen_ty_2 = 64;
pub const JVMTI_THREAD_STATE_IN_OBJECT_WAIT: _bindgen_ty_2 = 256;
pub const JVMTI_THREAD_STATE_PARKED: _bindgen_ty_2 = 512;
pub const JVMTI_THREAD_STATE_SUSPENDED: _bindgen_ty_2 = 1048576;
pub const JVMTI_THREAD_STATE_INTERRUPTED: _bindgen_ty_2 = 2097152;
pub const JVMTI_THREAD_STATE_IN_NATIVE: _bindgen_ty_2 = 4194304;
pub const JVMTI_THREAD_STATE_VENDOR_1: _bindgen_ty_2 = 268435456;
pub const JVMTI_THREAD_STATE_VENDOR_2: _bindgen_ty_2 = 536870912;
pub const JVMTI_THREAD_STATE_VENDOR_3: _bindgen_ty_2 = 1073741824;
pub type _bindgen_ty_2 = ::std::os::raw::c_int;
pub const JVMTI_JAVA_LANG_THREAD_STATE_MASK: _bindgen_ty_3 = 1207;
pub const JVMTI_JAVA_LANG_THREAD_STATE_NEW: _bindgen_ty_3 = 0;
pub const JVMTI_JAVA_LANG_THREAD_STATE_TERMINATED: _bindgen_ty_3 = 2;
pub const JVMTI_JAVA_LANG_THREAD_STATE_RUNNABLE: _bindgen_ty_3 = 5;
pub const JVMTI_JAVA_LANG_THREAD_STATE_BLOCKED: _bindgen_ty_3 = 1025;
pub const JVMTI_JAVA_LANG_THREAD_STATE_WAITING: _bindgen_ty_3 = 145;
pub const JVMTI_JAVA_LANG_THREAD_STATE_TIMED_WAITING: _bindgen_ty_3 = 161;
pub type _bindgen_ty_3 = ::std::os::raw::c_int;
pub const JVMTI_THREAD_MIN_PRIORITY: _bindgen_ty_4 = 1;
pub const JVMTI_THREAD_NORM_PRIORITY: _bindgen_ty_4 = 5;
pub const JVMTI_THREAD_MAX_PRIORITY: _bindgen_ty_4 = 10;
pub type _bindgen_ty_4 = ::std::os::raw::c_int;
pub const JVMTI_HEAP_FILTER_TAGGED: _bindgen_ty_5 = 4;
pub const JVMTI_HEAP_FILTER_UNTAGGED: _bindgen_ty_5 = 8;
pub const JVMTI_HEAP_FILTER_CLASS_TAGGED: _bindgen_ty_5 = 16;
pub const JVMTI_HEAP_FILTER_CLASS_UNTAGGED: _bindgen_ty_5 = 32;
pub type _bindgen_ty_5 = ::std::os::raw::c_int;
pub const JVMTI_VISIT_OBJECTS: _bindgen_ty_6 = 256;
pub const JVMTI_VISIT_ABORT: _bindgen_ty_6 = 32768;
pub type _bindgen_ty_6 = ::std::os::raw::c_int;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_CLASS: jvmtiHeapReferenceKind = 1;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_FIELD: jvmtiHeapReferenceKind = 2;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_ARRAY_ELEMENT: jvmtiHeapReferenceKind = 3;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_CLASS_LOADER: jvmtiHeapReferenceKind = 4;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_SIGNERS: jvmtiHeapReferenceKind = 5;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_PROTECTION_DOMAIN: jvmtiHeapReferenceKind = 6;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_INTERFACE: jvmtiHeapReferenceKind = 7;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_STATIC_FIELD: jvmtiHeapReferenceKind = 8;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_CONSTANT_POOL: jvmtiHeapReferenceKind = 9;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_SUPERCLASS: jvmtiHeapReferenceKind = 10;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_JNI_GLOBAL: jvmtiHeapReferenceKind = 21;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_SYSTEM_CLASS: jvmtiHeapReferenceKind = 22;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_MONITOR: jvmtiHeapReferenceKind = 23;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_STACK_LOCAL: jvmtiHeapReferenceKind = 24;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_JNI_LOCAL: jvmtiHeapReferenceKind = 25;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_THREAD: jvmtiHeapReferenceKind = 26;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_OTHER: jvmtiHeapReferenceKind = 27;
pub type jvmtiHeapReferenceKind = ::std::os::raw::c_int;
pub const jvmtiPrimitiveType_JVMTI_PRIMITIVE_TYPE_BOOLEAN: jvmtiPrimitiveType = 90;
pub const jvmtiPrimitiveType_JVMTI_PRIMITIVE_TYPE_BYTE: jvmtiPrimitiveType = 66;
pub const jvmtiPrimitiveType_JVMTI_PRIMITIVE_TYPE_CHAR: jvmtiPrimitiveType = 67;
pub const jvmtiPrimitiveType_JVMTI_PRIMITIVE_TYPE_SHORT: jvmtiPrimitiveType = 83;
pub const jvmtiPrimitiveType_JVMTI_PRIMITIVE_TYPE_INT: jvmtiPrimitiveType = 73;
pub const jvmtiPrimitiveType_JVMTI_PRIMITIVE_TYPE_LONG: jvmtiPrimitiveType = 74;
pub const jvmtiPrimitiveType_JVMTI_PRIMITIVE_TYPE_FLOAT: jvmtiPrimitiveType = 70;
pub const jvmtiPrimitiveType_JVMTI_PRIMITIVE_TYPE_DOUBLE: jvmtiPrimitiveType = 68;
pub type jvmtiPrimitiveType = ::std::os::raw::c_int;
pub const jvmtiHeapObjectFilter_JVMTI_HEAP_OBJECT_TAGGED: jvmtiHeapObjectFilter = 1;
pub const jvmtiHeapObjectFilter_JVMTI_HEAP_OBJECT_UNTAGGED: jvmtiHeapObjectFilter = 2;
pub const jvmtiHeapObjectFilter_JVMTI_HEAP_OBJECT_EITHER: jvmtiHeapObjectFilter = 3;
pub type jvmtiHeapObjectFilter = ::std::os::raw::c_int;
pub const jvmtiHeapRootKind_JVMTI_HEAP_ROOT_JNI_GLOBAL: jvmtiHeapRootKind = 1;
pub const jvmtiHeapRootKind_JVMTI_HEAP_ROOT_SYSTEM_CLASS: jvmtiHeapRootKind = 2;
pub const jvmtiHeapRootKind_JVMTI_HEAP_ROOT_MONITOR: jvmtiHeapRootKind = 3;
pub const jvmtiHeapRootKind_JVMTI_HEAP_ROOT_STACK_LOCAL: jvmtiHeapRootKind = 4;
pub const jvmtiHeapRootKind_JVMTI_HEAP_ROOT_JNI_LOCAL: jvmtiHeapRootKind = 5;
pub const jvmtiHeapRootKind_JVMTI_HEAP_ROOT_THREAD: jvmtiHeapRootKind = 6;
pub const jvmtiHeapRootKind_JVMTI_HEAP_ROOT_OTHER: jvmtiHeapRootKind = 7;
pub type jvmtiHeapRootKind = ::std::os::raw::c_int;
pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_CLASS: jvmtiObjectReferenceKind = 1;
pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_FIELD: jvmtiObjectReferenceKind = 2;
pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_ARRAY_ELEMENT: jvmtiObjectReferenceKind = 3;
pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_CLASS_LOADER: jvmtiObjectReferenceKind = 4;
pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_SIGNERS: jvmtiObjectReferenceKind = 5;
pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_PROTECTION_DOMAIN: jvmtiObjectReferenceKind = 6;
pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_INTERFACE: jvmtiObjectReferenceKind = 7;
pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_STATIC_FIELD: jvmtiObjectReferenceKind = 8;
pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_CONSTANT_POOL: jvmtiObjectReferenceKind = 9;
pub type jvmtiObjectReferenceKind = ::std::os::raw::c_int;
pub const jvmtiIterationControl_JVMTI_ITERATION_CONTINUE: jvmtiIterationControl = 1;
pub const jvmtiIterationControl_JVMTI_ITERATION_IGNORE: jvmtiIterationControl = 2;
pub const jvmtiIterationControl_JVMTI_ITERATION_ABORT: jvmtiIterationControl = 0;
pub type jvmtiIterationControl = ::std::os::raw::c_int;
pub const JVMTI_CLASS_STATUS_VERIFIED: _bindgen_ty_7 = 1;
pub const JVMTI_CLASS_STATUS_PREPARED: _bindgen_ty_7 = 2;
pub const JVMTI_CLASS_STATUS_INITIALIZED: _bindgen_ty_7 = 4;
pub const JVMTI_CLASS_STATUS_ERROR: _bindgen_ty_7 = 8;
pub const JVMTI_CLASS_STATUS_ARRAY: _bindgen_ty_7 = 16;
pub const JVMTI_CLASS_STATUS_PRIMITIVE: _bindgen_ty_7 = 32;
pub type _bindgen_ty_7 = ::std::os::raw::c_int;
pub const jvmtiEventMode_JVMTI_ENABLE: jvmtiEventMode = 1;
pub const jvmtiEventMode_JVMTI_DISABLE: jvmtiEventMode = 0;
pub type jvmtiEventMode = ::std::os::raw::c_int;
pub const jvmtiParamTypes_JVMTI_TYPE_JBYTE: jvmtiParamTypes = 101;
pub const jvmtiParamTypes_JVMTI_TYPE_JCHAR: jvmtiParamTypes = 102;
pub const jvmtiParamTypes_JVMTI_TYPE_JSHORT: jvmtiParamTypes = 103;
pub const jvmtiParamTypes_JVMTI_TYPE_JINT: jvmtiParamTypes = 104;
pub const jvmtiParamTypes_JVMTI_TYPE_JLONG: jvmtiParamTypes = 105;
pub const jvmtiParamTypes_JVMTI_TYPE_JFLOAT: jvmtiParamTypes = 106;
pub const jvmtiParamTypes_JVMTI_TYPE_JDOUBLE: jvmtiParamTypes = 107;
pub const jvmtiParamTypes_JVMTI_TYPE_JBOOLEAN: jvmtiParamTypes = 108;
pub const jvmtiParamTypes_JVMTI_TYPE_JOBJECT: jvmtiParamTypes = 109;
pub const jvmtiParamTypes_JVMTI_TYPE_JTHREAD: jvmtiParamTypes = 110;
pub const jvmtiParamTypes_JVMTI_TYPE_JCLASS: jvmtiParamTypes = 111;
pub const jvmtiParamTypes_JVMTI_TYPE_JVALUE: jvmtiParamTypes = 112;
pub const jvmtiParamTypes_JVMTI_TYPE_JFIELDID: jvmtiParamTypes = 113;
pub const jvmtiParamTypes_JVMTI_TYPE_JMETHODID: jvmtiParamTypes = 114;
pub const jvmtiParamTypes_JVMTI_TYPE_CCHAR: jvmtiParamTypes = 115;
pub const jvmtiParamTypes_JVMTI_TYPE_CVOID: jvmtiParamTypes = 116;
pub const jvmtiParamTypes_JVMTI_TYPE_JNIENV: jvmtiParamTypes = 117;
pub type jvmtiParamTypes = ::std::os::raw::c_int;
pub const jvmtiParamKind_JVMTI_KIND_IN: jvmtiParamKind = 91;
pub const jvmtiParamKind_JVMTI_KIND_IN_PTR: jvmtiParamKind = 92;
pub const jvmtiParamKind_JVMTI_KIND_IN_BUF: jvmtiParamKind = 93;
pub const jvmtiParamKind_JVMTI_KIND_ALLOC_BUF: jvmtiParamKind = 94;
pub const jvmtiParamKind_JVMTI_KIND_ALLOC_ALLOC_BUF: jvmtiParamKind = 95;
pub const jvmtiParamKind_JVMTI_KIND_OUT: jvmtiParamKind = 96;
pub const jvmtiParamKind_JVMTI_KIND_OUT_BUF: jvmtiParamKind = 97;
pub type jvmtiParamKind = ::std::os::raw::c_int;
pub const jvmtiTimerKind_JVMTI_TIMER_USER_CPU: jvmtiTimerKind = 30;
pub const jvmtiTimerKind_JVMTI_TIMER_TOTAL_CPU: jvmtiTimerKind = 31;
pub const jvmtiTimerKind_JVMTI_TIMER_ELAPSED: jvmtiTimerKind = 32;
pub type jvmtiTimerKind = ::std::os::raw::c_int;
pub const jvmtiPhase_JVMTI_PHASE_ONLOAD: jvmtiPhase = 1;
pub const jvmtiPhase_JVMTI_PHASE_PRIMORDIAL: jvmtiPhase = 2;
pub const jvmtiPhase_JVMTI_PHASE_START: jvmtiPhase = 6;
pub const jvmtiPhase_JVMTI_PHASE_LIVE: jvmtiPhase = 4;
pub const jvmtiPhase_JVMTI_PHASE_DEAD: jvmtiPhase = 8;
pub type jvmtiPhase = ::std::os::raw::c_int;
pub const JVMTI_VERSION_INTERFACE_JNI: _bindgen_ty_8 = 0;
pub const JVMTI_VERSION_INTERFACE_JVMTI: _bindgen_ty_8 = 805306368;
pub type _bindgen_ty_8 = ::std::os::raw::c_int;
pub const JVMTI_VERSION_MASK_INTERFACE_TYPE: _bindgen_ty_9 = 1879048192;
pub const JVMTI_VERSION_MASK_MAJOR: _bindgen_ty_9 = 268369920;
pub const JVMTI_VERSION_MASK_MINOR: _bindgen_ty_9 = 65280;
pub const JVMTI_VERSION_MASK_MICRO: _bindgen_ty_9 = 255;
pub type _bindgen_ty_9 = ::std::os::raw::c_int;
pub const JVMTI_VERSION_SHIFT_MAJOR: _bindgen_ty_10 = 16;
pub const JVMTI_VERSION_SHIFT_MINOR: _bindgen_ty_10 = 8;
pub const JVMTI_VERSION_SHIFT_MICRO: _bindgen_ty_10 = 0;
pub type _bindgen_ty_10 = ::std::os::raw::c_int;
pub const jvmtiVerboseFlag_JVMTI_VERBOSE_OTHER: jvmtiVerboseFlag = 0;
pub const jvmtiVerboseFlag_JVMTI_VERBOSE_GC: jvmtiVerboseFlag = 1;
pub const jvmtiVerboseFlag_JVMTI_VERBOSE_CLASS: jvmtiVerboseFlag = 2;
pub const jvmtiVerboseFlag_JVMTI_VERBOSE_JNI: jvmtiVerboseFlag = 4;
pub type jvmtiVerboseFlag = ::std::os::raw::c_int;
pub const jvmtiJlocationFormat_JVMTI_JLOCATION_JVMBCI: jvmtiJlocationFormat = 1;
pub const jvmtiJlocationFormat_JVMTI_JLOCATION_MACHINEPC: jvmtiJlocationFormat = 2;
pub const jvmtiJlocationFormat_JVMTI_JLOCATION_OTHER: jvmtiJlocationFormat = 0;
pub type jvmtiJlocationFormat = ::std::os::raw::c_int;
pub const JVMTI_RESOURCE_EXHAUSTED_OOM_ERROR: _bindgen_ty_11 = 1;
pub const JVMTI_RESOURCE_EXHAUSTED_JAVA_HEAP: _bindgen_ty_11 = 2;
pub const JVMTI_RESOURCE_EXHAUSTED_THREADS: _bindgen_ty_11 = 4;
pub type _bindgen_ty_11 = ::std::os::raw::c_int;
pub const jvmtiError_JVMTI_ERROR_NONE: jvmtiError = 0;
pub const jvmtiError_JVMTI_ERROR_INVALID_THREAD: jvmtiError = 10;
pub const jvmtiError_JVMTI_ERROR_INVALID_THREAD_GROUP: jvmtiError = 11;
pub const jvmtiError_JVMTI_ERROR_INVALID_PRIORITY: jvmtiError = 12;
pub const jvmtiError_JVMTI_ERROR_THREAD_NOT_SUSPENDED: jvmtiError = 13;
pub const jvmtiError_JVMTI_ERROR_THREAD_SUSPENDED: jvmtiError = 14;
pub const jvmtiError_JVMTI_ERROR_THREAD_NOT_ALIVE: jvmtiError = 15;
pub const jvmtiError_JVMTI_ERROR_INVALID_OBJECT: jvmtiError = 20;
pub const jvmtiError_JVMTI_ERROR_INVALID_CLASS: jvmtiError = 21;
pub const jvmtiError_JVMTI_ERROR_CLASS_NOT_PREPARED: jvmtiError = 22;
pub const jvmtiError_JVMTI_ERROR_INVALID_METHODID: jvmtiError = 23;
pub const jvmtiError_JVMTI_ERROR_INVALID_LOCATION: jvmtiError = 24;
pub const jvmtiError_JVMTI_ERROR_INVALID_FIELDID: jvmtiError = 25;
pub const jvmtiError_JVMTI_ERROR_INVALID_MODULE: jvmtiError = 26;
pub const jvmtiError_JVMTI_ERROR_NO_MORE_FRAMES: jvmtiError = 31;
pub const jvmtiError_JVMTI_ERROR_OPAQUE_FRAME: jvmtiError = 32;
pub const jvmtiError_JVMTI_ERROR_TYPE_MISMATCH: jvmtiError = 34;
pub const jvmtiError_JVMTI_ERROR_INVALID_SLOT: jvmtiError = 35;
pub const jvmtiError_JVMTI_ERROR_DUPLICATE: jvmtiError = 40;
pub const jvmtiError_JVMTI_ERROR_NOT_FOUND: jvmtiError = 41;
pub const jvmtiError_JVMTI_ERROR_INVALID_MONITOR: jvmtiError = 50;
pub const jvmtiError_JVMTI_ERROR_NOT_MONITOR_OWNER: jvmtiError = 51;
pub const jvmtiError_JVMTI_ERROR_INTERRUPT: jvmtiError = 52;
pub const jvmtiError_JVMTI_ERROR_INVALID_CLASS_FORMAT: jvmtiError = 60;
pub const jvmtiError_JVMTI_ERROR_CIRCULAR_CLASS_DEFINITION: jvmtiError = 61;
pub const jvmtiError_JVMTI_ERROR_FAILS_VERIFICATION: jvmtiError = 62;
pub const jvmtiError_JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_ADDED: jvmtiError = 63;
pub const jvmtiError_JVMTI_ERROR_UNSUPPORTED_REDEFINITION_SCHEMA_CHANGED: jvmtiError = 64;
pub const jvmtiError_JVMTI_ERROR_INVALID_TYPESTATE: jvmtiError = 65;
pub const jvmtiError_JVMTI_ERROR_UNSUPPORTED_REDEFINITION_HIERARCHY_CHANGED: jvmtiError = 66;
pub const jvmtiError_JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_DELETED: jvmtiError = 67;
pub const jvmtiError_JVMTI_ERROR_UNSUPPORTED_VERSION: jvmtiError = 68;
pub const jvmtiError_JVMTI_ERROR_NAMES_DONT_MATCH: jvmtiError = 69;
pub const jvmtiError_JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_MODIFIERS_CHANGED: jvmtiError = 70;
pub const jvmtiError_JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_MODIFIERS_CHANGED: jvmtiError = 71;
pub const jvmtiError_JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_ATTRIBUTE_CHANGED: jvmtiError = 72;
pub const jvmtiError_JVMTI_ERROR_UNMODIFIABLE_CLASS: jvmtiError = 79;
pub const jvmtiError_JVMTI_ERROR_UNMODIFIABLE_MODULE: jvmtiError = 80;
pub const jvmtiError_JVMTI_ERROR_NOT_AVAILABLE: jvmtiError = 98;
pub const jvmtiError_JVMTI_ERROR_MUST_POSSESS_CAPABILITY: jvmtiError = 99;
pub const jvmtiError_JVMTI_ERROR_NULL_POINTER: jvmtiError = 100;
pub const jvmtiError_JVMTI_ERROR_ABSENT_INFORMATION: jvmtiError = 101;
pub const jvmtiError_JVMTI_ERROR_INVALID_EVENT_TYPE: jvmtiError = 102;
pub const jvmtiError_JVMTI_ERROR_ILLEGAL_ARGUMENT: jvmtiError = 103;
pub const jvmtiError_JVMTI_ERROR_NATIVE_METHOD: jvmtiError = 104;
pub const jvmtiError_JVMTI_ERROR_CLASS_LOADER_UNSUPPORTED: jvmtiError = 106;
pub const jvmtiError_JVMTI_ERROR_OUT_OF_MEMORY: jvmtiError = 110;
pub const jvmtiError_JVMTI_ERROR_ACCESS_DENIED: jvmtiError = 111;
pub const jvmtiError_JVMTI_ERROR_WRONG_PHASE: jvmtiError = 112;
pub const jvmtiError_JVMTI_ERROR_INTERNAL: jvmtiError = 113;
pub const jvmtiError_JVMTI_ERROR_UNATTACHED_THREAD: jvmtiError = 115;
pub const jvmtiError_JVMTI_ERROR_INVALID_ENVIRONMENT: jvmtiError = 116;
pub const jvmtiError_JVMTI_ERROR_MAX: jvmtiError = 116;
pub type jvmtiError = ::std::os::raw::c_int;
pub const jvmtiEvent_JVMTI_MIN_EVENT_TYPE_VAL: jvmtiEvent = 50;
pub const jvmtiEvent_JVMTI_EVENT_VM_INIT: jvmtiEvent = 50;
pub const jvmtiEvent_JVMTI_EVENT_VM_DEATH: jvmtiEvent = 51;
pub const jvmtiEvent_JVMTI_EVENT_THREAD_START: jvmtiEvent = 52;
pub const jvmtiEvent_JVMTI_EVENT_THREAD_END: jvmtiEvent = 53;
pub const jvmtiEvent_JVMTI_EVENT_CLASS_FILE_LOAD_HOOK: jvmtiEvent = 54;
pub const jvmtiEvent_JVMTI_EVENT_CLASS_LOAD: jvmtiEvent = 55;
pub const jvmtiEvent_JVMTI_EVENT_CLASS_PREPARE: jvmtiEvent = 56;
pub const jvmtiEvent_JVMTI_EVENT_VM_START: jvmtiEvent = 57;
pub const jvmtiEvent_JVMTI_EVENT_EXCEPTION: jvmtiEvent = 58;
pub const jvmtiEvent_JVMTI_EVENT_EXCEPTION_CATCH: jvmtiEvent = 59;
pub const jvmtiEvent_JVMTI_EVENT_SINGLE_STEP: jvmtiEvent = 60;
pub const jvmtiEvent_JVMTI_EVENT_FRAME_POP: jvmtiEvent = 61;
pub const jvmtiEvent_JVMTI_EVENT_BREAKPOINT: jvmtiEvent = 62;
pub const jvmtiEvent_JVMTI_EVENT_FIELD_ACCESS: jvmtiEvent = 63;
pub const jvmtiEvent_JVMTI_EVENT_FIELD_MODIFICATION: jvmtiEvent = 64;
pub const jvmtiEvent_JVMTI_EVENT_METHOD_ENTRY: jvmtiEvent = 65;
pub const jvmtiEvent_JVMTI_EVENT_METHOD_EXIT: jvmtiEvent = 66;
pub const jvmtiEvent_JVMTI_EVENT_NATIVE_METHOD_BIND: jvmtiEvent = 67;
pub const jvmtiEvent_JVMTI_EVENT_COMPILED_METHOD_LOAD: jvmtiEvent = 68;
pub const jvmtiEvent_JVMTI_EVENT_COMPILED_METHOD_UNLOAD: jvmtiEvent = 69;
pub const jvmtiEvent_JVMTI_EVENT_DYNAMIC_CODE_GENERATED: jvmtiEvent = 70;
pub const jvmtiEvent_JVMTI_EVENT_DATA_DUMP_REQUEST: jvmtiEvent = 71;
pub const jvmtiEvent_JVMTI_EVENT_MONITOR_WAIT: jvmtiEvent = 73;
pub const jvmtiEvent_JVMTI_EVENT_MONITOR_WAITED: jvmtiEvent = 74;
pub const jvmtiEvent_JVMTI_EVENT_MONITOR_CONTENDED_ENTER: jvmtiEvent = 75;
pub const jvmtiEvent_JVMTI_EVENT_MONITOR_CONTENDED_ENTERED: jvmtiEvent = 76;
pub const jvmtiEvent_JVMTI_EVENT_RESOURCE_EXHAUSTED: jvmtiEvent = 80;
pub const jvmtiEvent_JVMTI_EVENT_GARBAGE_COLLECTION_START: jvmtiEvent = 81;
pub const jvmtiEvent_JVMTI_EVENT_GARBAGE_COLLECTION_FINISH: jvmtiEvent = 82;
pub const jvmtiEvent_JVMTI_EVENT_OBJECT_FREE: jvmtiEvent = 83;
pub const jvmtiEvent_JVMTI_EVENT_VM_OBJECT_ALLOC: jvmtiEvent = 84;
pub const jvmtiEvent_JVMTI_EVENT_SAMPLED_OBJECT_ALLOC: jvmtiEvent = 86;
pub const jvmtiEvent_JVMTI_MAX_EVENT_TYPE_VAL: jvmtiEvent = 86;
pub type jvmtiEvent = ::std::os::raw::c_int;
pub type jvmtiStartFunction = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        arg: *mut ::std::os::raw::c_void,
    ),
>;
pub type jvmtiHeapIterationCallback = ::std::option::Option<
    unsafe extern "C" fn(
        class_tag: jlong,
        size: jlong,
        tag_ptr: *mut jlong,
        length: jint,
        user_data: *mut ::std::os::raw::c_void,
    ) -> jint,
>;
pub type jvmtiHeapReferenceCallback = ::std::option::Option<
    unsafe extern "C" fn(
        reference_kind: jvmtiHeapReferenceKind,
        reference_info: *const jvmtiHeapReferenceInfo,
        class_tag: jlong,
        referrer_class_tag: jlong,
        size: jlong,
        tag_ptr: *mut jlong,
        referrer_tag_ptr: *mut jlong,
        length: jint,
        user_data: *mut ::std::os::raw::c_void,
    ) -> jint,
>;
pub type jvmtiPrimitiveFieldCallback = ::std::option::Option<
    unsafe extern "C" fn(
        kind: jvmtiHeapReferenceKind,
        info: *const jvmtiHeapReferenceInfo,
        object_class_tag: jlong,
        object_tag_ptr: *mut jlong,
        value: jvalue,
        value_type: jvmtiPrimitiveType,
        user_data: *mut ::std::os::raw::c_void,
    ) -> jint,
>;
pub type jvmtiArrayPrimitiveValueCallback = ::std::option::Option<
    unsafe extern "C" fn(
        class_tag: jlong,
        size: jlong,
        tag_ptr: *mut jlong,
        element_count: jint,
        element_type: jvmtiPrimitiveType,
        elements: *const ::std::os::raw::c_void,
        user_data: *mut ::std::os::raw::c_void,
    ) -> jint,
>;
pub type jvmtiStringPrimitiveValueCallback = ::std::option::Option<
    unsafe extern "C" fn(
        class_tag: jlong,
        size: jlong,
        tag_ptr: *mut jlong,
        value: *const jchar,
        value_length: jint,
        user_data: *mut ::std::os::raw::c_void,
    ) -> jint,
>;
pub type jvmtiReservedCallback = ::std::option::Option<unsafe extern "C" fn() -> jint>;
pub type jvmtiHeapObjectCallback = ::std::option::Option<
    unsafe extern "C" fn(
        class_tag: jlong,
        size: jlong,
        tag_ptr: *mut jlong,
        user_data: *mut ::std::os::raw::c_void,
    ) -> jvmtiIterationControl,
>;
pub type jvmtiHeapRootCallback = ::std::option::Option<
    unsafe extern "C" fn(
        root_kind: jvmtiHeapRootKind,
        class_tag: jlong,
        size: jlong,
        tag_ptr: *mut jlong,
        user_data: *mut ::std::os::raw::c_void,
    ) -> jvmtiIterationControl,
>;
pub type jvmtiStackReferenceCallback = ::std::option::Option<
    unsafe extern "C" fn(
        root_kind: jvmtiHeapRootKind,
        class_tag: jlong,
        size: jlong,
        tag_ptr: *mut jlong,
        thread_tag: jlong,
        depth: jint,
        method: jmethodID,
        slot: jint,
        user_data: *mut ::std::os::raw::c_void,
    ) -> jvmtiIterationControl,
>;
pub type jvmtiObjectReferenceCallback = ::std::option::Option<
    unsafe extern "C" fn(
        reference_kind: jvmtiObjectReferenceKind,
        class_tag: jlong,
        size: jlong,
        tag_ptr: *mut jlong,
        referrer_tag: jlong,
        referrer_index: jint,
        user_data: *mut ::std::os::raw::c_void,
    ) -> jvmtiIterationControl,
>;
pub type jvmtiExtensionFunction =
    ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv, ...) -> jvmtiError>;
pub type jvmtiExtensionEvent =
    ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv, ...)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiThreadInfo {
    pub name: *mut ::std::os::raw::c_char,
    pub priority: jint,
    pub is_daemon: jboolean,
    pub thread_group: jthreadGroup,
    pub context_class_loader: jobject,
}
#[test]
fn bindgen_test_layout_jvmtiThreadInfo() {
    assert_eq!(
        ::std::mem::size_of::<jvmtiThreadInfo>(),
        32usize,
        concat!("Size of: ", stringify!(jvmtiThreadInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiThreadInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiThreadInfo))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiThreadInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiThreadInfo),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_priority() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiThreadInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiThreadInfo),
                "::",
                stringify!(priority)
            )
        );
    }
    test_field_priority();
    fn test_field_is_daemon() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiThreadInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).is_daemon) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiThreadInfo),
                "::",
                stringify!(is_daemon)
            )
        );
    }
    test_field_is_daemon();
    fn test_field_thread_group() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiThreadInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).thread_group) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiThreadInfo),
                "::",
                stringify!(thread_group)
            )
        );
    }
    test_field_thread_group();
    fn test_field_context_class_loader() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiThreadInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).context_class_loader) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiThreadInfo),
                "::",
                stringify!(context_class_loader)
            )
        );
    }
    test_field_context_class_loader();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiMonitorStackDepthInfo {
    pub monitor: jobject,
    pub stack_depth: jint,
}
#[test]
fn bindgen_test_layout_jvmtiMonitorStackDepthInfo() {
    assert_eq!(
        ::std::mem::size_of::<jvmtiMonitorStackDepthInfo>(),
        16usize,
        concat!("Size of: ", stringify!(jvmtiMonitorStackDepthInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiMonitorStackDepthInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiMonitorStackDepthInfo))
    );
    fn test_field_monitor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiMonitorStackDepthInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).monitor) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiMonitorStackDepthInfo),
                "::",
                stringify!(monitor)
            )
        );
    }
    test_field_monitor();
    fn test_field_stack_depth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiMonitorStackDepthInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stack_depth) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiMonitorStackDepthInfo),
                "::",
                stringify!(stack_depth)
            )
        );
    }
    test_field_stack_depth();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiThreadGroupInfo {
    pub parent: jthreadGroup,
    pub name: *mut ::std::os::raw::c_char,
    pub max_priority: jint,
    pub is_daemon: jboolean,
}
#[test]
fn bindgen_test_layout_jvmtiThreadGroupInfo() {
    assert_eq!(
        ::std::mem::size_of::<jvmtiThreadGroupInfo>(),
        24usize,
        concat!("Size of: ", stringify!(jvmtiThreadGroupInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiThreadGroupInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiThreadGroupInfo))
    );
    fn test_field_parent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiThreadGroupInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiThreadGroupInfo),
                "::",
                stringify!(parent)
            )
        );
    }
    test_field_parent();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiThreadGroupInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiThreadGroupInfo),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_max_priority() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiThreadGroupInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_priority) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiThreadGroupInfo),
                "::",
                stringify!(max_priority)
            )
        );
    }
    test_field_max_priority();
    fn test_field_is_daemon() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiThreadGroupInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).is_daemon) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiThreadGroupInfo),
                "::",
                stringify!(is_daemon)
            )
        );
    }
    test_field_is_daemon();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiFrameInfo {
    pub method: jmethodID,
    pub location: jlocation,
}
#[test]
fn bindgen_test_layout_jvmtiFrameInfo() {
    assert_eq!(
        ::std::mem::size_of::<jvmtiFrameInfo>(),
        16usize,
        concat!("Size of: ", stringify!(jvmtiFrameInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiFrameInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiFrameInfo))
    );
    fn test_field_method() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiFrameInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiFrameInfo),
                "::",
                stringify!(method)
            )
        );
    }
    test_field_method();
    fn test_field_location() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiFrameInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiFrameInfo),
                "::",
                stringify!(location)
            )
        );
    }
    test_field_location();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiStackInfo {
    pub thread: jthread,
    pub state: jint,
    pub frame_buffer: *mut jvmtiFrameInfo,
    pub frame_count: jint,
}
#[test]
fn bindgen_test_layout_jvmtiStackInfo() {
    assert_eq!(
        ::std::mem::size_of::<jvmtiStackInfo>(),
        32usize,
        concat!("Size of: ", stringify!(jvmtiStackInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiStackInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiStackInfo))
    );
    fn test_field_thread() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiStackInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).thread) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiStackInfo),
                "::",
                stringify!(thread)
            )
        );
    }
    test_field_thread();
    fn test_field_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiStackInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiStackInfo),
                "::",
                stringify!(state)
            )
        );
    }
    test_field_state();
    fn test_field_frame_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiStackInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).frame_buffer) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiStackInfo),
                "::",
                stringify!(frame_buffer)
            )
        );
    }
    test_field_frame_buffer();
    fn test_field_frame_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiStackInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).frame_count) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiStackInfo),
                "::",
                stringify!(frame_count)
            )
        );
    }
    test_field_frame_count();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiHeapReferenceInfoField {
    pub index: jint,
}
#[test]
fn bindgen_test_layout_jvmtiHeapReferenceInfoField() {
    assert_eq!(
        ::std::mem::size_of::<jvmtiHeapReferenceInfoField>(),
        4usize,
        concat!("Size of: ", stringify!(jvmtiHeapReferenceInfoField))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiHeapReferenceInfoField>(),
        4usize,
        concat!("Alignment of ", stringify!(jvmtiHeapReferenceInfoField))
    );
    fn test_field_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfoField>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfoField),
                "::",
                stringify!(index)
            )
        );
    }
    test_field_index();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiHeapReferenceInfoArray {
    pub index: jint,
}
#[test]
fn bindgen_test_layout_jvmtiHeapReferenceInfoArray() {
    assert_eq!(
        ::std::mem::size_of::<jvmtiHeapReferenceInfoArray>(),
        4usize,
        concat!("Size of: ", stringify!(jvmtiHeapReferenceInfoArray))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiHeapReferenceInfoArray>(),
        4usize,
        concat!("Alignment of ", stringify!(jvmtiHeapReferenceInfoArray))
    );
    fn test_field_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfoArray>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfoArray),
                "::",
                stringify!(index)
            )
        );
    }
    test_field_index();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiHeapReferenceInfoConstantPool {
    pub index: jint,
}
#[test]
fn bindgen_test_layout_jvmtiHeapReferenceInfoConstantPool() {
    assert_eq!(
        ::std::mem::size_of::<jvmtiHeapReferenceInfoConstantPool>(),
        4usize,
        concat!("Size of: ", stringify!(jvmtiHeapReferenceInfoConstantPool))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiHeapReferenceInfoConstantPool>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(jvmtiHeapReferenceInfoConstantPool)
        )
    );
    fn test_field_index() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfoConstantPool>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfoConstantPool),
                "::",
                stringify!(index)
            )
        );
    }
    test_field_index();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiHeapReferenceInfoStackLocal {
    pub thread_tag: jlong,
    pub thread_id: jlong,
    pub depth: jint,
    pub method: jmethodID,
    pub location: jlocation,
    pub slot: jint,
}
#[test]
fn bindgen_test_layout_jvmtiHeapReferenceInfoStackLocal() {
    assert_eq!(
        ::std::mem::size_of::<jvmtiHeapReferenceInfoStackLocal>(),
        48usize,
        concat!("Size of: ", stringify!(jvmtiHeapReferenceInfoStackLocal))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiHeapReferenceInfoStackLocal>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(jvmtiHeapReferenceInfoStackLocal)
        )
    );
    fn test_field_thread_tag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfoStackLocal>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).thread_tag) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfoStackLocal),
                "::",
                stringify!(thread_tag)
            )
        );
    }
    test_field_thread_tag();
    fn test_field_thread_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfoStackLocal>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).thread_id) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfoStackLocal),
                "::",
                stringify!(thread_id)
            )
        );
    }
    test_field_thread_id();
    fn test_field_depth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfoStackLocal>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfoStackLocal),
                "::",
                stringify!(depth)
            )
        );
    }
    test_field_depth();
    fn test_field_method() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfoStackLocal>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfoStackLocal),
                "::",
                stringify!(method)
            )
        );
    }
    test_field_method();
    fn test_field_location() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfoStackLocal>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfoStackLocal),
                "::",
                stringify!(location)
            )
        );
    }
    test_field_location();
    fn test_field_slot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfoStackLocal>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).slot) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfoStackLocal),
                "::",
                stringify!(slot)
            )
        );
    }
    test_field_slot();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiHeapReferenceInfoJniLocal {
    pub thread_tag: jlong,
    pub thread_id: jlong,
    pub depth: jint,
    pub method: jmethodID,
}
#[test]
fn bindgen_test_layout_jvmtiHeapReferenceInfoJniLocal() {
    assert_eq!(
        ::std::mem::size_of::<jvmtiHeapReferenceInfoJniLocal>(),
        32usize,
        concat!("Size of: ", stringify!(jvmtiHeapReferenceInfoJniLocal))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiHeapReferenceInfoJniLocal>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiHeapReferenceInfoJniLocal))
    );
    fn test_field_thread_tag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfoJniLocal>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).thread_tag) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfoJniLocal),
                "::",
                stringify!(thread_tag)
            )
        );
    }
    test_field_thread_tag();
    fn test_field_thread_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfoJniLocal>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).thread_id) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfoJniLocal),
                "::",
                stringify!(thread_id)
            )
        );
    }
    test_field_thread_id();
    fn test_field_depth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfoJniLocal>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfoJniLocal),
                "::",
                stringify!(depth)
            )
        );
    }
    test_field_depth();
    fn test_field_method() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfoJniLocal>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfoJniLocal),
                "::",
                stringify!(method)
            )
        );
    }
    test_field_method();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiHeapReferenceInfoReserved {
    pub reserved1: jlong,
    pub reserved2: jlong,
    pub reserved3: jlong,
    pub reserved4: jlong,
    pub reserved5: jlong,
    pub reserved6: jlong,
    pub reserved7: jlong,
    pub reserved8: jlong,
}
#[test]
fn bindgen_test_layout_jvmtiHeapReferenceInfoReserved() {
    assert_eq!(
        ::std::mem::size_of::<jvmtiHeapReferenceInfoReserved>(),
        64usize,
        concat!("Size of: ", stringify!(jvmtiHeapReferenceInfoReserved))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiHeapReferenceInfoReserved>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiHeapReferenceInfoReserved))
    );
    fn test_field_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfoReserved>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfoReserved),
                "::",
                stringify!(reserved1)
            )
        );
    }
    test_field_reserved1();
    fn test_field_reserved2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfoReserved>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfoReserved),
                "::",
                stringify!(reserved2)
            )
        );
    }
    test_field_reserved2();
    fn test_field_reserved3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfoReserved>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved3) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfoReserved),
                "::",
                stringify!(reserved3)
            )
        );
    }
    test_field_reserved3();
    fn test_field_reserved4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfoReserved>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved4) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfoReserved),
                "::",
                stringify!(reserved4)
            )
        );
    }
    test_field_reserved4();
    fn test_field_reserved5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfoReserved>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved5) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfoReserved),
                "::",
                stringify!(reserved5)
            )
        );
    }
    test_field_reserved5();
    fn test_field_reserved6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfoReserved>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved6) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfoReserved),
                "::",
                stringify!(reserved6)
            )
        );
    }
    test_field_reserved6();
    fn test_field_reserved7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfoReserved>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved7) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfoReserved),
                "::",
                stringify!(reserved7)
            )
        );
    }
    test_field_reserved7();
    fn test_field_reserved8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfoReserved>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved8) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfoReserved),
                "::",
                stringify!(reserved8)
            )
        );
    }
    test_field_reserved8();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union jvmtiHeapReferenceInfo {
    pub field: jvmtiHeapReferenceInfoField,
    pub array: jvmtiHeapReferenceInfoArray,
    pub constant_pool: jvmtiHeapReferenceInfoConstantPool,
    pub stack_local: jvmtiHeapReferenceInfoStackLocal,
    pub jni_local: jvmtiHeapReferenceInfoJniLocal,
    pub other: jvmtiHeapReferenceInfoReserved,
}
#[test]
fn bindgen_test_layout_jvmtiHeapReferenceInfo() {
    assert_eq!(
        ::std::mem::size_of::<jvmtiHeapReferenceInfo>(),
        64usize,
        concat!("Size of: ", stringify!(jvmtiHeapReferenceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiHeapReferenceInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiHeapReferenceInfo))
    );
    fn test_field_field() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).field) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfo),
                "::",
                stringify!(field)
            )
        );
    }
    test_field_field();
    fn test_field_array() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfo),
                "::",
                stringify!(array)
            )
        );
    }
    test_field_array();
    fn test_field_constant_pool() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).constant_pool) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfo),
                "::",
                stringify!(constant_pool)
            )
        );
    }
    test_field_constant_pool();
    fn test_field_stack_local() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stack_local) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfo),
                "::",
                stringify!(stack_local)
            )
        );
    }
    test_field_stack_local();
    fn test_field_jni_local() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).jni_local) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfo),
                "::",
                stringify!(jni_local)
            )
        );
    }
    test_field_jni_local();
    fn test_field_other() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapReferenceInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).other) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapReferenceInfo),
                "::",
                stringify!(other)
            )
        );
    }
    test_field_other();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiHeapCallbacks {
    pub heap_iteration_callback: jvmtiHeapIterationCallback,
    pub heap_reference_callback: jvmtiHeapReferenceCallback,
    pub primitive_field_callback: jvmtiPrimitiveFieldCallback,
    pub array_primitive_value_callback: jvmtiArrayPrimitiveValueCallback,
    pub string_primitive_value_callback: jvmtiStringPrimitiveValueCallback,
    pub reserved5: jvmtiReservedCallback,
    pub reserved6: jvmtiReservedCallback,
    pub reserved7: jvmtiReservedCallback,
    pub reserved8: jvmtiReservedCallback,
    pub reserved9: jvmtiReservedCallback,
    pub reserved10: jvmtiReservedCallback,
    pub reserved11: jvmtiReservedCallback,
    pub reserved12: jvmtiReservedCallback,
    pub reserved13: jvmtiReservedCallback,
    pub reserved14: jvmtiReservedCallback,
    pub reserved15: jvmtiReservedCallback,
}
#[test]
fn bindgen_test_layout_jvmtiHeapCallbacks() {
    assert_eq!(
        ::std::mem::size_of::<jvmtiHeapCallbacks>(),
        128usize,
        concat!("Size of: ", stringify!(jvmtiHeapCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiHeapCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiHeapCallbacks))
    );
    fn test_field_heap_iteration_callback() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).heap_iteration_callback) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapCallbacks),
                "::",
                stringify!(heap_iteration_callback)
            )
        );
    }
    test_field_heap_iteration_callback();
    fn test_field_heap_reference_callback() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).heap_reference_callback) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapCallbacks),
                "::",
                stringify!(heap_reference_callback)
            )
        );
    }
    test_field_heap_reference_callback();
    fn test_field_primitive_field_callback() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).primitive_field_callback) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapCallbacks),
                "::",
                stringify!(primitive_field_callback)
            )
        );
    }
    test_field_primitive_field_callback();
    fn test_field_array_primitive_value_callback() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).array_primitive_value_callback) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapCallbacks),
                "::",
                stringify!(array_primitive_value_callback)
            )
        );
    }
    test_field_array_primitive_value_callback();
    fn test_field_string_primitive_value_callback() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).string_primitive_value_callback) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapCallbacks),
                "::",
                stringify!(string_primitive_value_callback)
            )
        );
    }
    test_field_string_primitive_value_callback();
    fn test_field_reserved5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved5) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapCallbacks),
                "::",
                stringify!(reserved5)
            )
        );
    }
    test_field_reserved5();
    fn test_field_reserved6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved6) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapCallbacks),
                "::",
                stringify!(reserved6)
            )
        );
    }
    test_field_reserved6();
    fn test_field_reserved7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved7) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapCallbacks),
                "::",
                stringify!(reserved7)
            )
        );
    }
    test_field_reserved7();
    fn test_field_reserved8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved8) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapCallbacks),
                "::",
                stringify!(reserved8)
            )
        );
    }
    test_field_reserved8();
    fn test_field_reserved9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved9) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapCallbacks),
                "::",
                stringify!(reserved9)
            )
        );
    }
    test_field_reserved9();
    fn test_field_reserved10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved10) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapCallbacks),
                "::",
                stringify!(reserved10)
            )
        );
    }
    test_field_reserved10();
    fn test_field_reserved11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved11) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapCallbacks),
                "::",
                stringify!(reserved11)
            )
        );
    }
    test_field_reserved11();
    fn test_field_reserved12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved12) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapCallbacks),
                "::",
                stringify!(reserved12)
            )
        );
    }
    test_field_reserved12();
    fn test_field_reserved13() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved13) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapCallbacks),
                "::",
                stringify!(reserved13)
            )
        );
    }
    test_field_reserved13();
    fn test_field_reserved14() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved14) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapCallbacks),
                "::",
                stringify!(reserved14)
            )
        );
    }
    test_field_reserved14();
    fn test_field_reserved15() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiHeapCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved15) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiHeapCallbacks),
                "::",
                stringify!(reserved15)
            )
        );
    }
    test_field_reserved15();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiClassDefinition {
    pub klass: jclass,
    pub class_byte_count: jint,
    pub class_bytes: *const ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_jvmtiClassDefinition() {
    assert_eq!(
        ::std::mem::size_of::<jvmtiClassDefinition>(),
        24usize,
        concat!("Size of: ", stringify!(jvmtiClassDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiClassDefinition>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiClassDefinition))
    );
    fn test_field_klass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiClassDefinition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).klass) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiClassDefinition),
                "::",
                stringify!(klass)
            )
        );
    }
    test_field_klass();
    fn test_field_class_byte_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiClassDefinition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).class_byte_count) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiClassDefinition),
                "::",
                stringify!(class_byte_count)
            )
        );
    }
    test_field_class_byte_count();
    fn test_field_class_bytes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiClassDefinition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).class_bytes) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiClassDefinition),
                "::",
                stringify!(class_bytes)
            )
        );
    }
    test_field_class_bytes();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiMonitorUsage {
    pub owner: jthread,
    pub entry_count: jint,
    pub waiter_count: jint,
    pub waiters: *mut jthread,
    pub notify_waiter_count: jint,
    pub notify_waiters: *mut jthread,
}
#[test]
fn bindgen_test_layout_jvmtiMonitorUsage() {
    assert_eq!(
        ::std::mem::size_of::<jvmtiMonitorUsage>(),
        40usize,
        concat!("Size of: ", stringify!(jvmtiMonitorUsage))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiMonitorUsage>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiMonitorUsage))
    );
    fn test_field_owner() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiMonitorUsage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).owner) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiMonitorUsage),
                "::",
                stringify!(owner)
            )
        );
    }
    test_field_owner();
    fn test_field_entry_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiMonitorUsage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).entry_count) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiMonitorUsage),
                "::",
                stringify!(entry_count)
            )
        );
    }
    test_field_entry_count();
    fn test_field_waiter_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiMonitorUsage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).waiter_count) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiMonitorUsage),
                "::",
                stringify!(waiter_count)
            )
        );
    }
    test_field_waiter_count();
    fn test_field_waiters() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiMonitorUsage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).waiters) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiMonitorUsage),
                "::",
                stringify!(waiters)
            )
        );
    }
    test_field_waiters();
    fn test_field_notify_waiter_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiMonitorUsage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).notify_waiter_count) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiMonitorUsage),
                "::",
                stringify!(notify_waiter_count)
            )
        );
    }
    test_field_notify_waiter_count();
    fn test_field_notify_waiters() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiMonitorUsage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).notify_waiters) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiMonitorUsage),
                "::",
                stringify!(notify_waiters)
            )
        );
    }
    test_field_notify_waiters();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiLineNumberEntry {
    pub start_location: jlocation,
    pub line_number: jint,
}
#[test]
fn bindgen_test_layout_jvmtiLineNumberEntry() {
    assert_eq!(
        ::std::mem::size_of::<jvmtiLineNumberEntry>(),
        16usize,
        concat!("Size of: ", stringify!(jvmtiLineNumberEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiLineNumberEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiLineNumberEntry))
    );
    fn test_field_start_location() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiLineNumberEntry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).start_location) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiLineNumberEntry),
                "::",
                stringify!(start_location)
            )
        );
    }
    test_field_start_location();
    fn test_field_line_number() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiLineNumberEntry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).line_number) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiLineNumberEntry),
                "::",
                stringify!(line_number)
            )
        );
    }
    test_field_line_number();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiLocalVariableEntry {
    pub start_location: jlocation,
    pub length: jint,
    pub name: *mut ::std::os::raw::c_char,
    pub signature: *mut ::std::os::raw::c_char,
    pub generic_signature: *mut ::std::os::raw::c_char,
    pub slot: jint,
}
#[test]
fn bindgen_test_layout_jvmtiLocalVariableEntry() {
    assert_eq!(
        ::std::mem::size_of::<jvmtiLocalVariableEntry>(),
        48usize,
        concat!("Size of: ", stringify!(jvmtiLocalVariableEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiLocalVariableEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiLocalVariableEntry))
    );
    fn test_field_start_location() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiLocalVariableEntry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).start_location) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiLocalVariableEntry),
                "::",
                stringify!(start_location)
            )
        );
    }
    test_field_start_location();
    fn test_field_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiLocalVariableEntry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiLocalVariableEntry),
                "::",
                stringify!(length)
            )
        );
    }
    test_field_length();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiLocalVariableEntry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiLocalVariableEntry),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_signature() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiLocalVariableEntry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).signature) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiLocalVariableEntry),
                "::",
                stringify!(signature)
            )
        );
    }
    test_field_signature();
    fn test_field_generic_signature() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiLocalVariableEntry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).generic_signature) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiLocalVariableEntry),
                "::",
                stringify!(generic_signature)
            )
        );
    }
    test_field_generic_signature();
    fn test_field_slot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiLocalVariableEntry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).slot) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiLocalVariableEntry),
                "::",
                stringify!(slot)
            )
        );
    }
    test_field_slot();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiParamInfo {
    pub name: *mut ::std::os::raw::c_char,
    pub kind: jvmtiParamKind,
    pub base_type: jvmtiParamTypes,
    pub null_ok: jboolean,
}
#[test]
fn bindgen_test_layout_jvmtiParamInfo() {
    assert_eq!(
        ::std::mem::size_of::<jvmtiParamInfo>(),
        24usize,
        concat!("Size of: ", stringify!(jvmtiParamInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiParamInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiParamInfo))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiParamInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiParamInfo),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_kind() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiParamInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiParamInfo),
                "::",
                stringify!(kind)
            )
        );
    }
    test_field_kind();
    fn test_field_base_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiParamInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).base_type) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiParamInfo),
                "::",
                stringify!(base_type)
            )
        );
    }
    test_field_base_type();
    fn test_field_null_ok() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiParamInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).null_ok) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiParamInfo),
                "::",
                stringify!(null_ok)
            )
        );
    }
    test_field_null_ok();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiExtensionFunctionInfo {
    pub func: jvmtiExtensionFunction,
    pub id: *mut ::std::os::raw::c_char,
    pub short_description: *mut ::std::os::raw::c_char,
    pub param_count: jint,
    pub params: *mut jvmtiParamInfo,
    pub error_count: jint,
    pub errors: *mut jvmtiError,
}
#[test]
fn bindgen_test_layout_jvmtiExtensionFunctionInfo() {
    assert_eq!(
        ::std::mem::size_of::<jvmtiExtensionFunctionInfo>(),
        56usize,
        concat!("Size of: ", stringify!(jvmtiExtensionFunctionInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiExtensionFunctionInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiExtensionFunctionInfo))
    );
    fn test_field_func() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiExtensionFunctionInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiExtensionFunctionInfo),
                "::",
                stringify!(func)
            )
        );
    }
    test_field_func();
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiExtensionFunctionInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiExtensionFunctionInfo),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
    fn test_field_short_description() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiExtensionFunctionInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).short_description) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiExtensionFunctionInfo),
                "::",
                stringify!(short_description)
            )
        );
    }
    test_field_short_description();
    fn test_field_param_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiExtensionFunctionInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).param_count) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiExtensionFunctionInfo),
                "::",
                stringify!(param_count)
            )
        );
    }
    test_field_param_count();
    fn test_field_params() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiExtensionFunctionInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiExtensionFunctionInfo),
                "::",
                stringify!(params)
            )
        );
    }
    test_field_params();
    fn test_field_error_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiExtensionFunctionInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).error_count) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiExtensionFunctionInfo),
                "::",
                stringify!(error_count)
            )
        );
    }
    test_field_error_count();
    fn test_field_errors() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiExtensionFunctionInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).errors) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiExtensionFunctionInfo),
                "::",
                stringify!(errors)
            )
        );
    }
    test_field_errors();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiExtensionEventInfo {
    pub extension_event_index: jint,
    pub id: *mut ::std::os::raw::c_char,
    pub short_description: *mut ::std::os::raw::c_char,
    pub param_count: jint,
    pub params: *mut jvmtiParamInfo,
}
#[test]
fn bindgen_test_layout_jvmtiExtensionEventInfo() {
    assert_eq!(
        ::std::mem::size_of::<jvmtiExtensionEventInfo>(),
        40usize,
        concat!("Size of: ", stringify!(jvmtiExtensionEventInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiExtensionEventInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiExtensionEventInfo))
    );
    fn test_field_extension_event_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiExtensionEventInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).extension_event_index) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiExtensionEventInfo),
                "::",
                stringify!(extension_event_index)
            )
        );
    }
    test_field_extension_event_index();
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiExtensionEventInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiExtensionEventInfo),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
    fn test_field_short_description() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiExtensionEventInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).short_description) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiExtensionEventInfo),
                "::",
                stringify!(short_description)
            )
        );
    }
    test_field_short_description();
    fn test_field_param_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiExtensionEventInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).param_count) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiExtensionEventInfo),
                "::",
                stringify!(param_count)
            )
        );
    }
    test_field_param_count();
    fn test_field_params() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiExtensionEventInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiExtensionEventInfo),
                "::",
                stringify!(params)
            )
        );
    }
    test_field_params();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiTimerInfo {
    pub max_value: jlong,
    pub may_skip_forward: jboolean,
    pub may_skip_backward: jboolean,
    pub kind: jvmtiTimerKind,
    pub reserved1: jlong,
    pub reserved2: jlong,
}
#[test]
fn bindgen_test_layout_jvmtiTimerInfo() {
    assert_eq!(
        ::std::mem::size_of::<jvmtiTimerInfo>(),
        32usize,
        concat!("Size of: ", stringify!(jvmtiTimerInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiTimerInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiTimerInfo))
    );
    fn test_field_max_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiTimerInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_value) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiTimerInfo),
                "::",
                stringify!(max_value)
            )
        );
    }
    test_field_max_value();
    fn test_field_may_skip_forward() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiTimerInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).may_skip_forward) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiTimerInfo),
                "::",
                stringify!(may_skip_forward)
            )
        );
    }
    test_field_may_skip_forward();
    fn test_field_may_skip_backward() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiTimerInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).may_skip_backward) as usize - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiTimerInfo),
                "::",
                stringify!(may_skip_backward)
            )
        );
    }
    test_field_may_skip_backward();
    fn test_field_kind() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiTimerInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiTimerInfo),
                "::",
                stringify!(kind)
            )
        );
    }
    test_field_kind();
    fn test_field_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiTimerInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiTimerInfo),
                "::",
                stringify!(reserved1)
            )
        );
    }
    test_field_reserved1();
    fn test_field_reserved2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiTimerInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiTimerInfo),
                "::",
                stringify!(reserved2)
            )
        );
    }
    test_field_reserved2();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiAddrLocationMap {
    pub start_address: *const ::std::os::raw::c_void,
    pub location: jlocation,
}
#[test]
fn bindgen_test_layout_jvmtiAddrLocationMap() {
    assert_eq!(
        ::std::mem::size_of::<jvmtiAddrLocationMap>(),
        16usize,
        concat!("Size of: ", stringify!(jvmtiAddrLocationMap))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiAddrLocationMap>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiAddrLocationMap))
    );
    fn test_field_start_address() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiAddrLocationMap>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).start_address) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiAddrLocationMap),
                "::",
                stringify!(start_address)
            )
        );
    }
    test_field_start_address();
    fn test_field_location() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiAddrLocationMap>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiAddrLocationMap),
                "::",
                stringify!(location)
            )
        );
    }
    test_field_location();
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiCapabilities {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 16usize]>,
}
#[test]
fn bindgen_test_layout_jvmtiCapabilities() {
    assert_eq!(
        ::std::mem::size_of::<jvmtiCapabilities>(),
        16usize,
        concat!("Size of: ", stringify!(jvmtiCapabilities))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiCapabilities>(),
        4usize,
        concat!("Alignment of ", stringify!(jvmtiCapabilities))
    );
}
impl jvmtiCapabilities {
    #[inline]
    pub fn can_tag_objects(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_tag_objects(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_field_modification_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_field_modification_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_field_access_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_field_access_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_get_bytecodes(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_get_bytecodes(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_get_synthetic_attribute(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_get_synthetic_attribute(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_get_owned_monitor_info(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_get_owned_monitor_info(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_get_current_contended_monitor(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_get_current_contended_monitor(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_get_monitor_info(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_get_monitor_info(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_pop_frame(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_pop_frame(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_redefine_classes(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_redefine_classes(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_signal_thread(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_signal_thread(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_get_source_file_name(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_get_source_file_name(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_get_line_numbers(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_get_line_numbers(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_get_source_debug_extension(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_get_source_debug_extension(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_access_local_variables(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_access_local_variables(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_maintain_original_method_order(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_maintain_original_method_order(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_single_step_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_single_step_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_exception_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_exception_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_frame_pop_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_frame_pop_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_breakpoint_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_breakpoint_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_suspend(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_suspend(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_redefine_any_class(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_redefine_any_class(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_get_current_thread_cpu_time(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_get_current_thread_cpu_time(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_get_thread_cpu_time(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_get_thread_cpu_time(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_method_entry_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_method_entry_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_method_exit_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_method_exit_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_all_class_hook_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_all_class_hook_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_compiled_method_load_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_compiled_method_load_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_monitor_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_monitor_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_vm_object_alloc_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_vm_object_alloc_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_native_method_bind_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_native_method_bind_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_garbage_collection_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_garbage_collection_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_object_free_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_object_free_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_force_early_return(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_force_early_return(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_get_owned_monitor_stack_depth_info(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_get_owned_monitor_stack_depth_info(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_get_constant_pool(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(35usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_get_constant_pool(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(35usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_set_native_method_prefix(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(36usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_set_native_method_prefix(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(36usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_retransform_classes(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(37usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_retransform_classes(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(37usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_retransform_any_class(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(38usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_retransform_any_class(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(38usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_resource_exhaustion_heap_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(39usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_resource_exhaustion_heap_events(
        &mut self,
        val: ::std::os::raw::c_uint,
    ) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(39usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_resource_exhaustion_threads_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(40usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_resource_exhaustion_threads_events(
        &mut self,
        val: ::std::os::raw::c_uint,
    ) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(40usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_early_vmstart(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(41usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_early_vmstart(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(41usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_early_class_hook_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(42usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_early_class_hook_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(42usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_sampled_object_alloc_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(43usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_sampled_object_alloc_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(43usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        can_tag_objects: ::std::os::raw::c_uint,
        can_generate_field_modification_events: ::std::os::raw::c_uint,
        can_generate_field_access_events: ::std::os::raw::c_uint,
        can_get_bytecodes: ::std::os::raw::c_uint,
        can_get_synthetic_attribute: ::std::os::raw::c_uint,
        can_get_owned_monitor_info: ::std::os::raw::c_uint,
        can_get_current_contended_monitor: ::std::os::raw::c_uint,
        can_get_monitor_info: ::std::os::raw::c_uint,
        can_pop_frame: ::std::os::raw::c_uint,
        can_redefine_classes: ::std::os::raw::c_uint,
        can_signal_thread: ::std::os::raw::c_uint,
        can_get_source_file_name: ::std::os::raw::c_uint,
        can_get_line_numbers: ::std::os::raw::c_uint,
        can_get_source_debug_extension: ::std::os::raw::c_uint,
        can_access_local_variables: ::std::os::raw::c_uint,
        can_maintain_original_method_order: ::std::os::raw::c_uint,
        can_generate_single_step_events: ::std::os::raw::c_uint,
        can_generate_exception_events: ::std::os::raw::c_uint,
        can_generate_frame_pop_events: ::std::os::raw::c_uint,
        can_generate_breakpoint_events: ::std::os::raw::c_uint,
        can_suspend: ::std::os::raw::c_uint,
        can_redefine_any_class: ::std::os::raw::c_uint,
        can_get_current_thread_cpu_time: ::std::os::raw::c_uint,
        can_get_thread_cpu_time: ::std::os::raw::c_uint,
        can_generate_method_entry_events: ::std::os::raw::c_uint,
        can_generate_method_exit_events: ::std::os::raw::c_uint,
        can_generate_all_class_hook_events: ::std::os::raw::c_uint,
        can_generate_compiled_method_load_events: ::std::os::raw::c_uint,
        can_generate_monitor_events: ::std::os::raw::c_uint,
        can_generate_vm_object_alloc_events: ::std::os::raw::c_uint,
        can_generate_native_method_bind_events: ::std::os::raw::c_uint,
        can_generate_garbage_collection_events: ::std::os::raw::c_uint,
        can_generate_object_free_events: ::std::os::raw::c_uint,
        can_force_early_return: ::std::os::raw::c_uint,
        can_get_owned_monitor_stack_depth_info: ::std::os::raw::c_uint,
        can_get_constant_pool: ::std::os::raw::c_uint,
        can_set_native_method_prefix: ::std::os::raw::c_uint,
        can_retransform_classes: ::std::os::raw::c_uint,
        can_retransform_any_class: ::std::os::raw::c_uint,
        can_generate_resource_exhaustion_heap_events: ::std::os::raw::c_uint,
        can_generate_resource_exhaustion_threads_events: ::std::os::raw::c_uint,
        can_generate_early_vmstart: ::std::os::raw::c_uint,
        can_generate_early_class_hook_events: ::std::os::raw::c_uint,
        can_generate_sampled_object_alloc_events: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 16usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 16usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let can_tag_objects: u32 = unsafe { ::std::mem::transmute(can_tag_objects) };
            can_tag_objects as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let can_generate_field_modification_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_field_modification_events) };
            can_generate_field_modification_events as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let can_generate_field_access_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_field_access_events) };
            can_generate_field_access_events as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let can_get_bytecodes: u32 = unsafe { ::std::mem::transmute(can_get_bytecodes) };
            can_get_bytecodes as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let can_get_synthetic_attribute: u32 =
                unsafe { ::std::mem::transmute(can_get_synthetic_attribute) };
            can_get_synthetic_attribute as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let can_get_owned_monitor_info: u32 =
                unsafe { ::std::mem::transmute(can_get_owned_monitor_info) };
            can_get_owned_monitor_info as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let can_get_current_contended_monitor: u32 =
                unsafe { ::std::mem::transmute(can_get_current_contended_monitor) };
            can_get_current_contended_monitor as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let can_get_monitor_info: u32 = unsafe { ::std::mem::transmute(can_get_monitor_info) };
            can_get_monitor_info as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let can_pop_frame: u32 = unsafe { ::std::mem::transmute(can_pop_frame) };
            can_pop_frame as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let can_redefine_classes: u32 = unsafe { ::std::mem::transmute(can_redefine_classes) };
            can_redefine_classes as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let can_signal_thread: u32 = unsafe { ::std::mem::transmute(can_signal_thread) };
            can_signal_thread as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let can_get_source_file_name: u32 =
                unsafe { ::std::mem::transmute(can_get_source_file_name) };
            can_get_source_file_name as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let can_get_line_numbers: u32 = unsafe { ::std::mem::transmute(can_get_line_numbers) };
            can_get_line_numbers as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let can_get_source_debug_extension: u32 =
                unsafe { ::std::mem::transmute(can_get_source_debug_extension) };
            can_get_source_debug_extension as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let can_access_local_variables: u32 =
                unsafe { ::std::mem::transmute(can_access_local_variables) };
            can_access_local_variables as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let can_maintain_original_method_order: u32 =
                unsafe { ::std::mem::transmute(can_maintain_original_method_order) };
            can_maintain_original_method_order as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let can_generate_single_step_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_single_step_events) };
            can_generate_single_step_events as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let can_generate_exception_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_exception_events) };
            can_generate_exception_events as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let can_generate_frame_pop_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_frame_pop_events) };
            can_generate_frame_pop_events as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let can_generate_breakpoint_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_breakpoint_events) };
            can_generate_breakpoint_events as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let can_suspend: u32 = unsafe { ::std::mem::transmute(can_suspend) };
            can_suspend as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let can_redefine_any_class: u32 =
                unsafe { ::std::mem::transmute(can_redefine_any_class) };
            can_redefine_any_class as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let can_get_current_thread_cpu_time: u32 =
                unsafe { ::std::mem::transmute(can_get_current_thread_cpu_time) };
            can_get_current_thread_cpu_time as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let can_get_thread_cpu_time: u32 =
                unsafe { ::std::mem::transmute(can_get_thread_cpu_time) };
            can_get_thread_cpu_time as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let can_generate_method_entry_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_method_entry_events) };
            can_generate_method_entry_events as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let can_generate_method_exit_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_method_exit_events) };
            can_generate_method_exit_events as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let can_generate_all_class_hook_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_all_class_hook_events) };
            can_generate_all_class_hook_events as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let can_generate_compiled_method_load_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_compiled_method_load_events) };
            can_generate_compiled_method_load_events as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let can_generate_monitor_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_monitor_events) };
            can_generate_monitor_events as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let can_generate_vm_object_alloc_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_vm_object_alloc_events) };
            can_generate_vm_object_alloc_events as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let can_generate_native_method_bind_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_native_method_bind_events) };
            can_generate_native_method_bind_events as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let can_generate_garbage_collection_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_garbage_collection_events) };
            can_generate_garbage_collection_events as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let can_generate_object_free_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_object_free_events) };
            can_generate_object_free_events as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let can_force_early_return: u32 =
                unsafe { ::std::mem::transmute(can_force_early_return) };
            can_force_early_return as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let can_get_owned_monitor_stack_depth_info: u32 =
                unsafe { ::std::mem::transmute(can_get_owned_monitor_stack_depth_info) };
            can_get_owned_monitor_stack_depth_info as u64
        });
        __bindgen_bitfield_unit.set(35usize, 1u8, {
            let can_get_constant_pool: u32 =
                unsafe { ::std::mem::transmute(can_get_constant_pool) };
            can_get_constant_pool as u64
        });
        __bindgen_bitfield_unit.set(36usize, 1u8, {
            let can_set_native_method_prefix: u32 =
                unsafe { ::std::mem::transmute(can_set_native_method_prefix) };
            can_set_native_method_prefix as u64
        });
        __bindgen_bitfield_unit.set(37usize, 1u8, {
            let can_retransform_classes: u32 =
                unsafe { ::std::mem::transmute(can_retransform_classes) };
            can_retransform_classes as u64
        });
        __bindgen_bitfield_unit.set(38usize, 1u8, {
            let can_retransform_any_class: u32 =
                unsafe { ::std::mem::transmute(can_retransform_any_class) };
            can_retransform_any_class as u64
        });
        __bindgen_bitfield_unit.set(39usize, 1u8, {
            let can_generate_resource_exhaustion_heap_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_resource_exhaustion_heap_events) };
            can_generate_resource_exhaustion_heap_events as u64
        });
        __bindgen_bitfield_unit.set(40usize, 1u8, {
            let can_generate_resource_exhaustion_threads_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_resource_exhaustion_threads_events) };
            can_generate_resource_exhaustion_threads_events as u64
        });
        __bindgen_bitfield_unit.set(41usize, 1u8, {
            let can_generate_early_vmstart: u32 =
                unsafe { ::std::mem::transmute(can_generate_early_vmstart) };
            can_generate_early_vmstart as u64
        });
        __bindgen_bitfield_unit.set(42usize, 1u8, {
            let can_generate_early_class_hook_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_early_class_hook_events) };
            can_generate_early_class_hook_events as u64
        });
        __bindgen_bitfield_unit.set(43usize, 1u8, {
            let can_generate_sampled_object_alloc_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_sampled_object_alloc_events) };
            can_generate_sampled_object_alloc_events as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type jvmtiEventReserved = ::std::option::Option<unsafe extern "C" fn()>;
pub type jvmtiEventBreakpoint = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        method: jmethodID,
        location: jlocation,
    ),
>;
pub type jvmtiEventClassFileLoadHook = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        class_being_redefined: jclass,
        loader: jobject,
        name: *const ::std::os::raw::c_char,
        protection_domain: jobject,
        class_data_len: jint,
        class_data: *const ::std::os::raw::c_uchar,
        new_class_data_len: *mut jint,
        new_class_data: *mut *mut ::std::os::raw::c_uchar,
    ),
>;
pub type jvmtiEventClassLoad = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        klass: jclass,
    ),
>;
pub type jvmtiEventClassPrepare = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        klass: jclass,
    ),
>;
pub type jvmtiEventCompiledMethodLoad = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        method: jmethodID,
        code_size: jint,
        code_addr: *const ::std::os::raw::c_void,
        map_length: jint,
        map: *const jvmtiAddrLocationMap,
        compile_info: *const ::std::os::raw::c_void,
    ),
>;
pub type jvmtiEventCompiledMethodUnload = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        method: jmethodID,
        code_addr: *const ::std::os::raw::c_void,
    ),
>;
pub type jvmtiEventDataDumpRequest =
    ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv)>;
pub type jvmtiEventDynamicCodeGenerated = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        name: *const ::std::os::raw::c_char,
        address: *const ::std::os::raw::c_void,
        length: jint,
    ),
>;
pub type jvmtiEventException = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        method: jmethodID,
        location: jlocation,
        exception: jobject,
        catch_method: jmethodID,
        catch_location: jlocation,
    ),
>;
pub type jvmtiEventExceptionCatch = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        method: jmethodID,
        location: jlocation,
        exception: jobject,
    ),
>;
pub type jvmtiEventFieldAccess = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        method: jmethodID,
        location: jlocation,
        field_klass: jclass,
        object: jobject,
        field: jfieldID,
    ),
>;
pub type jvmtiEventFieldModification = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        method: jmethodID,
        location: jlocation,
        field_klass: jclass,
        object: jobject,
        field: jfieldID,
        signature_type: ::std::os::raw::c_char,
        new_value: jvalue,
    ),
>;
pub type jvmtiEventFramePop = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        method: jmethodID,
        was_popped_by_exception: jboolean,
    ),
>;
pub type jvmtiEventGarbageCollectionFinish =
    ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv)>;
pub type jvmtiEventGarbageCollectionStart =
    ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv)>;
pub type jvmtiEventMethodEntry = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        method: jmethodID,
    ),
>;
pub type jvmtiEventMethodExit = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        method: jmethodID,
        was_popped_by_exception: jboolean,
        return_value: jvalue,
    ),
>;
pub type jvmtiEventMonitorContendedEnter = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        object: jobject,
    ),
>;
pub type jvmtiEventMonitorContendedEntered = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        object: jobject,
    ),
>;
pub type jvmtiEventMonitorWait = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        object: jobject,
        timeout: jlong,
    ),
>;
pub type jvmtiEventMonitorWaited = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        object: jobject,
        timed_out: jboolean,
    ),
>;
pub type jvmtiEventNativeMethodBind = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        method: jmethodID,
        address: *mut ::std::os::raw::c_void,
        new_address_ptr: *mut *mut ::std::os::raw::c_void,
    ),
>;
pub type jvmtiEventObjectFree =
    ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv, tag: jlong)>;
pub type jvmtiEventResourceExhausted = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        flags: jint,
        reserved: *const ::std::os::raw::c_void,
        description: *const ::std::os::raw::c_char,
    ),
>;
pub type jvmtiEventSampledObjectAlloc = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        object: jobject,
        object_klass: jclass,
        size: jlong,
    ),
>;
pub type jvmtiEventSingleStep = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        method: jmethodID,
        location: jlocation,
    ),
>;
pub type jvmtiEventThreadEnd = ::std::option::Option<
    unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv, jni_env: *mut JNIEnv, thread: jthread),
>;
pub type jvmtiEventThreadStart = ::std::option::Option<
    unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv, jni_env: *mut JNIEnv, thread: jthread),
>;
pub type jvmtiEventVMDeath =
    ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv, jni_env: *mut JNIEnv)>;
pub type jvmtiEventVMInit = ::std::option::Option<
    unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv, jni_env: *mut JNIEnv, thread: jthread),
>;
pub type jvmtiEventVMObjectAlloc = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        object: jobject,
        object_klass: jclass,
        size: jlong,
    ),
>;
pub type jvmtiEventVMStart =
    ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv, jni_env: *mut JNIEnv)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiEventCallbacks {
    pub VMInit: jvmtiEventVMInit,
    pub VMDeath: jvmtiEventVMDeath,
    pub ThreadStart: jvmtiEventThreadStart,
    pub ThreadEnd: jvmtiEventThreadEnd,
    pub ClassFileLoadHook: jvmtiEventClassFileLoadHook,
    pub ClassLoad: jvmtiEventClassLoad,
    pub ClassPrepare: jvmtiEventClassPrepare,
    pub VMStart: jvmtiEventVMStart,
    pub Exception: jvmtiEventException,
    pub ExceptionCatch: jvmtiEventExceptionCatch,
    pub SingleStep: jvmtiEventSingleStep,
    pub FramePop: jvmtiEventFramePop,
    pub Breakpoint: jvmtiEventBreakpoint,
    pub FieldAccess: jvmtiEventFieldAccess,
    pub FieldModification: jvmtiEventFieldModification,
    pub MethodEntry: jvmtiEventMethodEntry,
    pub MethodExit: jvmtiEventMethodExit,
    pub NativeMethodBind: jvmtiEventNativeMethodBind,
    pub CompiledMethodLoad: jvmtiEventCompiledMethodLoad,
    pub CompiledMethodUnload: jvmtiEventCompiledMethodUnload,
    pub DynamicCodeGenerated: jvmtiEventDynamicCodeGenerated,
    pub DataDumpRequest: jvmtiEventDataDumpRequest,
    pub reserved72: jvmtiEventReserved,
    pub MonitorWait: jvmtiEventMonitorWait,
    pub MonitorWaited: jvmtiEventMonitorWaited,
    pub MonitorContendedEnter: jvmtiEventMonitorContendedEnter,
    pub MonitorContendedEntered: jvmtiEventMonitorContendedEntered,
    pub reserved77: jvmtiEventReserved,
    pub reserved78: jvmtiEventReserved,
    pub reserved79: jvmtiEventReserved,
    pub ResourceExhausted: jvmtiEventResourceExhausted,
    pub GarbageCollectionStart: jvmtiEventGarbageCollectionStart,
    pub GarbageCollectionFinish: jvmtiEventGarbageCollectionFinish,
    pub ObjectFree: jvmtiEventObjectFree,
    pub VMObjectAlloc: jvmtiEventVMObjectAlloc,
    pub reserved85: jvmtiEventReserved,
    pub SampledObjectAlloc: jvmtiEventSampledObjectAlloc,
}
#[test]
fn bindgen_test_layout_jvmtiEventCallbacks() {
    assert_eq!(
        ::std::mem::size_of::<jvmtiEventCallbacks>(),
        296usize,
        concat!("Size of: ", stringify!(jvmtiEventCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiEventCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiEventCallbacks))
    );
    fn test_field_VMInit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VMInit) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(VMInit)
            )
        );
    }
    test_field_VMInit();
    fn test_field_VMDeath() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VMDeath) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(VMDeath)
            )
        );
    }
    test_field_VMDeath();
    fn test_field_ThreadStart() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ThreadStart) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(ThreadStart)
            )
        );
    }
    test_field_ThreadStart();
    fn test_field_ThreadEnd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ThreadEnd) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(ThreadEnd)
            )
        );
    }
    test_field_ThreadEnd();
    fn test_field_ClassFileLoadHook() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClassFileLoadHook) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(ClassFileLoadHook)
            )
        );
    }
    test_field_ClassFileLoadHook();
    fn test_field_ClassLoad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClassLoad) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(ClassLoad)
            )
        );
    }
    test_field_ClassLoad();
    fn test_field_ClassPrepare() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClassPrepare) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(ClassPrepare)
            )
        );
    }
    test_field_ClassPrepare();
    fn test_field_VMStart() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VMStart) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(VMStart)
            )
        );
    }
    test_field_VMStart();
    fn test_field_Exception() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Exception) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(Exception)
            )
        );
    }
    test_field_Exception();
    fn test_field_ExceptionCatch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ExceptionCatch) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(ExceptionCatch)
            )
        );
    }
    test_field_ExceptionCatch();
    fn test_field_SingleStep() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SingleStep) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(SingleStep)
            )
        );
    }
    test_field_SingleStep();
    fn test_field_FramePop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FramePop) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(FramePop)
            )
        );
    }
    test_field_FramePop();
    fn test_field_Breakpoint() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Breakpoint) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(Breakpoint)
            )
        );
    }
    test_field_Breakpoint();
    fn test_field_FieldAccess() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FieldAccess) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(FieldAccess)
            )
        );
    }
    test_field_FieldAccess();
    fn test_field_FieldModification() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FieldModification) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(FieldModification)
            )
        );
    }
    test_field_FieldModification();
    fn test_field_MethodEntry() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MethodEntry) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(MethodEntry)
            )
        );
    }
    test_field_MethodEntry();
    fn test_field_MethodExit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MethodExit) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(MethodExit)
            )
        );
    }
    test_field_MethodExit();
    fn test_field_NativeMethodBind() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NativeMethodBind) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(NativeMethodBind)
            )
        );
    }
    test_field_NativeMethodBind();
    fn test_field_CompiledMethodLoad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CompiledMethodLoad) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(CompiledMethodLoad)
            )
        );
    }
    test_field_CompiledMethodLoad();
    fn test_field_CompiledMethodUnload() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CompiledMethodUnload) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(CompiledMethodUnload)
            )
        );
    }
    test_field_CompiledMethodUnload();
    fn test_field_DynamicCodeGenerated() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DynamicCodeGenerated) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(DynamicCodeGenerated)
            )
        );
    }
    test_field_DynamicCodeGenerated();
    fn test_field_DataDumpRequest() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DataDumpRequest) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(DataDumpRequest)
            )
        );
    }
    test_field_DataDumpRequest();
    fn test_field_reserved72() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved72) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(reserved72)
            )
        );
    }
    test_field_reserved72();
    fn test_field_MonitorWait() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MonitorWait) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(MonitorWait)
            )
        );
    }
    test_field_MonitorWait();
    fn test_field_MonitorWaited() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MonitorWaited) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(MonitorWaited)
            )
        );
    }
    test_field_MonitorWaited();
    fn test_field_MonitorContendedEnter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MonitorContendedEnter) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(MonitorContendedEnter)
            )
        );
    }
    test_field_MonitorContendedEnter();
    fn test_field_MonitorContendedEntered() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MonitorContendedEntered) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(MonitorContendedEntered)
            )
        );
    }
    test_field_MonitorContendedEntered();
    fn test_field_reserved77() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved77) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(reserved77)
            )
        );
    }
    test_field_reserved77();
    fn test_field_reserved78() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved78) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(reserved78)
            )
        );
    }
    test_field_reserved78();
    fn test_field_reserved79() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved79) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(reserved79)
            )
        );
    }
    test_field_reserved79();
    fn test_field_ResourceExhausted() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ResourceExhausted) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(ResourceExhausted)
            )
        );
    }
    test_field_ResourceExhausted();
    fn test_field_GarbageCollectionStart() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GarbageCollectionStart) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(GarbageCollectionStart)
            )
        );
    }
    test_field_GarbageCollectionStart();
    fn test_field_GarbageCollectionFinish() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GarbageCollectionFinish) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(GarbageCollectionFinish)
            )
        );
    }
    test_field_GarbageCollectionFinish();
    fn test_field_ObjectFree() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ObjectFree) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(ObjectFree)
            )
        );
    }
    test_field_ObjectFree();
    fn test_field_VMObjectAlloc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VMObjectAlloc) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(VMObjectAlloc)
            )
        );
    }
    test_field_VMObjectAlloc();
    fn test_field_reserved85() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved85) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(reserved85)
            )
        );
    }
    test_field_reserved85();
    fn test_field_SampledObjectAlloc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiEventCallbacks>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SampledObjectAlloc) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiEventCallbacks),
                "::",
                stringify!(SampledObjectAlloc)
            )
        );
    }
    test_field_SampledObjectAlloc();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiInterface_1_ {
    pub reserved1: *mut ::std::os::raw::c_void,
    pub SetEventNotificationMode: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            mode: jvmtiEventMode,
            event_type: jvmtiEvent,
            event_thread: jthread,
            ...
        ) -> jvmtiError,
    >,
    pub GetAllModules: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            module_count_ptr: *mut jint,
            modules_ptr: *mut *mut jobject,
        ) -> jvmtiError,
    >,
    pub GetAllThreads: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            threads_count_ptr: *mut jint,
            threads_ptr: *mut *mut jthread,
        ) -> jvmtiError,
    >,
    pub SuspendThread: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread) -> jvmtiError,
    >,
    pub ResumeThread: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread) -> jvmtiError,
    >,
    pub StopThread: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, exception: jobject) -> jvmtiError,
    >,
    pub InterruptThread: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread) -> jvmtiError,
    >,
    pub GetThreadInfo: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            info_ptr: *mut jvmtiThreadInfo,
        ) -> jvmtiError,
    >,
    pub GetOwnedMonitorInfo: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            owned_monitor_count_ptr: *mut jint,
            owned_monitors_ptr: *mut *mut jobject,
        ) -> jvmtiError,
    >,
    pub GetCurrentContendedMonitor: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            monitor_ptr: *mut jobject,
        ) -> jvmtiError,
    >,
    pub RunAgentThread: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            proc_: jvmtiStartFunction,
            arg: *const ::std::os::raw::c_void,
            priority: jint,
        ) -> jvmtiError,
    >,
    pub GetTopThreadGroups: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            group_count_ptr: *mut jint,
            groups_ptr: *mut *mut jthreadGroup,
        ) -> jvmtiError,
    >,
    pub GetThreadGroupInfo: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            group: jthreadGroup,
            info_ptr: *mut jvmtiThreadGroupInfo,
        ) -> jvmtiError,
    >,
    pub GetThreadGroupChildren: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            group: jthreadGroup,
            thread_count_ptr: *mut jint,
            threads_ptr: *mut *mut jthread,
            group_count_ptr: *mut jint,
            groups_ptr: *mut *mut jthreadGroup,
        ) -> jvmtiError,
    >,
    pub GetFrameCount: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            count_ptr: *mut jint,
        ) -> jvmtiError,
    >,
    pub GetThreadState: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            thread_state_ptr: *mut jint,
        ) -> jvmtiError,
    >,
    pub GetCurrentThread: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, thread_ptr: *mut jthread) -> jvmtiError,
    >,
    pub GetFrameLocation: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            depth: jint,
            method_ptr: *mut jmethodID,
            location_ptr: *mut jlocation,
        ) -> jvmtiError,
    >,
    pub NotifyFramePop: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, depth: jint) -> jvmtiError,
    >,
    pub GetLocalObject: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            depth: jint,
            slot: jint,
            value_ptr: *mut jobject,
        ) -> jvmtiError,
    >,
    pub GetLocalInt: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            depth: jint,
            slot: jint,
            value_ptr: *mut jint,
        ) -> jvmtiError,
    >,
    pub GetLocalLong: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            depth: jint,
            slot: jint,
            value_ptr: *mut jlong,
        ) -> jvmtiError,
    >,
    pub GetLocalFloat: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            depth: jint,
            slot: jint,
            value_ptr: *mut jfloat,
        ) -> jvmtiError,
    >,
    pub GetLocalDouble: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            depth: jint,
            slot: jint,
            value_ptr: *mut jdouble,
        ) -> jvmtiError,
    >,
    pub SetLocalObject: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            depth: jint,
            slot: jint,
            value: jobject,
        ) -> jvmtiError,
    >,
    pub SetLocalInt: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            depth: jint,
            slot: jint,
            value: jint,
        ) -> jvmtiError,
    >,
    pub SetLocalLong: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            depth: jint,
            slot: jint,
            value: jlong,
        ) -> jvmtiError,
    >,
    pub SetLocalFloat: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            depth: jint,
            slot: jint,
            value: jfloat,
        ) -> jvmtiError,
    >,
    pub SetLocalDouble: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            depth: jint,
            slot: jint,
            value: jdouble,
        ) -> jvmtiError,
    >,
    pub CreateRawMonitor: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            name: *const ::std::os::raw::c_char,
            monitor_ptr: *mut jrawMonitorID,
        ) -> jvmtiError,
    >,
    pub DestroyRawMonitor: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, monitor: jrawMonitorID) -> jvmtiError,
    >,
    pub RawMonitorEnter: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, monitor: jrawMonitorID) -> jvmtiError,
    >,
    pub RawMonitorExit: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, monitor: jrawMonitorID) -> jvmtiError,
    >,
    pub RawMonitorWait: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            monitor: jrawMonitorID,
            millis: jlong,
        ) -> jvmtiError,
    >,
    pub RawMonitorNotify: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, monitor: jrawMonitorID) -> jvmtiError,
    >,
    pub RawMonitorNotifyAll: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, monitor: jrawMonitorID) -> jvmtiError,
    >,
    pub SetBreakpoint: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            location: jlocation,
        ) -> jvmtiError,
    >,
    pub ClearBreakpoint: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            location: jlocation,
        ) -> jvmtiError,
    >,
    pub GetNamedModule: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            class_loader: jobject,
            package_name: *const ::std::os::raw::c_char,
            module_ptr: *mut jobject,
        ) -> jvmtiError,
    >,
    pub SetFieldAccessWatch: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, field: jfieldID) -> jvmtiError,
    >,
    pub ClearFieldAccessWatch: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, field: jfieldID) -> jvmtiError,
    >,
    pub SetFieldModificationWatch: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, field: jfieldID) -> jvmtiError,
    >,
    pub ClearFieldModificationWatch: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, field: jfieldID) -> jvmtiError,
    >,
    pub IsModifiableClass: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            is_modifiable_class_ptr: *mut jboolean,
        ) -> jvmtiError,
    >,
    pub Allocate: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            size: jlong,
            mem_ptr: *mut *mut ::std::os::raw::c_uchar,
        ) -> jvmtiError,
    >,
    pub Deallocate: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, mem: *mut ::std::os::raw::c_uchar) -> jvmtiError,
    >,
    pub GetClassSignature: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            signature_ptr: *mut *mut ::std::os::raw::c_char,
            generic_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> jvmtiError,
    >,
    pub GetClassStatus: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            status_ptr: *mut jint,
        ) -> jvmtiError,
    >,
    pub GetSourceFileName: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            source_name_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> jvmtiError,
    >,
    pub GetClassModifiers: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            modifiers_ptr: *mut jint,
        ) -> jvmtiError,
    >,
    pub GetClassMethods: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            method_count_ptr: *mut jint,
            methods_ptr: *mut *mut jmethodID,
        ) -> jvmtiError,
    >,
    pub GetClassFields: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            field_count_ptr: *mut jint,
            fields_ptr: *mut *mut jfieldID,
        ) -> jvmtiError,
    >,
    pub GetImplementedInterfaces: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            interface_count_ptr: *mut jint,
            interfaces_ptr: *mut *mut jclass,
        ) -> jvmtiError,
    >,
    pub IsInterface: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            is_interface_ptr: *mut jboolean,
        ) -> jvmtiError,
    >,
    pub IsArrayClass: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            is_array_class_ptr: *mut jboolean,
        ) -> jvmtiError,
    >,
    pub GetClassLoader: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            classloader_ptr: *mut jobject,
        ) -> jvmtiError,
    >,
    pub GetObjectHashCode: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            object: jobject,
            hash_code_ptr: *mut jint,
        ) -> jvmtiError,
    >,
    pub GetObjectMonitorUsage: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            object: jobject,
            info_ptr: *mut jvmtiMonitorUsage,
        ) -> jvmtiError,
    >,
    pub GetFieldName: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            field: jfieldID,
            name_ptr: *mut *mut ::std::os::raw::c_char,
            signature_ptr: *mut *mut ::std::os::raw::c_char,
            generic_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> jvmtiError,
    >,
    pub GetFieldDeclaringClass: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            field: jfieldID,
            declaring_class_ptr: *mut jclass,
        ) -> jvmtiError,
    >,
    pub GetFieldModifiers: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            field: jfieldID,
            modifiers_ptr: *mut jint,
        ) -> jvmtiError,
    >,
    pub IsFieldSynthetic: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            field: jfieldID,
            is_synthetic_ptr: *mut jboolean,
        ) -> jvmtiError,
    >,
    pub GetMethodName: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            name_ptr: *mut *mut ::std::os::raw::c_char,
            signature_ptr: *mut *mut ::std::os::raw::c_char,
            generic_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> jvmtiError,
    >,
    pub GetMethodDeclaringClass: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            declaring_class_ptr: *mut jclass,
        ) -> jvmtiError,
    >,
    pub GetMethodModifiers: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            modifiers_ptr: *mut jint,
        ) -> jvmtiError,
    >,
    pub reserved67: *mut ::std::os::raw::c_void,
    pub GetMaxLocals: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            max_ptr: *mut jint,
        ) -> jvmtiError,
    >,
    pub GetArgumentsSize: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            size_ptr: *mut jint,
        ) -> jvmtiError,
    >,
    pub GetLineNumberTable: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            entry_count_ptr: *mut jint,
            table_ptr: *mut *mut jvmtiLineNumberEntry,
        ) -> jvmtiError,
    >,
    pub GetMethodLocation: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            start_location_ptr: *mut jlocation,
            end_location_ptr: *mut jlocation,
        ) -> jvmtiError,
    >,
    pub GetLocalVariableTable: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            entry_count_ptr: *mut jint,
            table_ptr: *mut *mut jvmtiLocalVariableEntry,
        ) -> jvmtiError,
    >,
    pub SetNativeMethodPrefix: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            prefix: *const ::std::os::raw::c_char,
        ) -> jvmtiError,
    >,
    pub SetNativeMethodPrefixes: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            prefix_count: jint,
            prefixes: *mut *mut ::std::os::raw::c_char,
        ) -> jvmtiError,
    >,
    pub GetBytecodes: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            bytecode_count_ptr: *mut jint,
            bytecodes_ptr: *mut *mut ::std::os::raw::c_uchar,
        ) -> jvmtiError,
    >,
    pub IsMethodNative: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            is_native_ptr: *mut jboolean,
        ) -> jvmtiError,
    >,
    pub IsMethodSynthetic: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            is_synthetic_ptr: *mut jboolean,
        ) -> jvmtiError,
    >,
    pub GetLoadedClasses: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            class_count_ptr: *mut jint,
            classes_ptr: *mut *mut jclass,
        ) -> jvmtiError,
    >,
    pub GetClassLoaderClasses: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            initiating_loader: jobject,
            class_count_ptr: *mut jint,
            classes_ptr: *mut *mut jclass,
        ) -> jvmtiError,
    >,
    pub PopFrame: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread) -> jvmtiError,
    >,
    pub ForceEarlyReturnObject: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, value: jobject) -> jvmtiError,
    >,
    pub ForceEarlyReturnInt: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, value: jint) -> jvmtiError,
    >,
    pub ForceEarlyReturnLong: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, value: jlong) -> jvmtiError,
    >,
    pub ForceEarlyReturnFloat: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, value: jfloat) -> jvmtiError,
    >,
    pub ForceEarlyReturnDouble: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, value: jdouble) -> jvmtiError,
    >,
    pub ForceEarlyReturnVoid: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread) -> jvmtiError,
    >,
    pub RedefineClasses: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            class_count: jint,
            class_definitions: *const jvmtiClassDefinition,
        ) -> jvmtiError,
    >,
    pub GetVersionNumber: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, version_ptr: *mut jint) -> jvmtiError,
    >,
    pub GetCapabilities: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            capabilities_ptr: *mut jvmtiCapabilities,
        ) -> jvmtiError,
    >,
    pub GetSourceDebugExtension: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            source_debug_extension_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> jvmtiError,
    >,
    pub IsMethodObsolete: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            is_obsolete_ptr: *mut jboolean,
        ) -> jvmtiError,
    >,
    pub SuspendThreadList: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            request_count: jint,
            request_list: *const jthread,
            results: *mut jvmtiError,
        ) -> jvmtiError,
    >,
    pub ResumeThreadList: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            request_count: jint,
            request_list: *const jthread,
            results: *mut jvmtiError,
        ) -> jvmtiError,
    >,
    pub AddModuleReads: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, module: jobject, to_module: jobject) -> jvmtiError,
    >,
    pub AddModuleExports: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            module: jobject,
            pkg_name: *const ::std::os::raw::c_char,
            to_module: jobject,
        ) -> jvmtiError,
    >,
    pub AddModuleOpens: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            module: jobject,
            pkg_name: *const ::std::os::raw::c_char,
            to_module: jobject,
        ) -> jvmtiError,
    >,
    pub AddModuleUses: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, module: jobject, service: jclass) -> jvmtiError,
    >,
    pub AddModuleProvides: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            module: jobject,
            service: jclass,
            impl_class: jclass,
        ) -> jvmtiError,
    >,
    pub IsModifiableModule: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            module: jobject,
            is_modifiable_module_ptr: *mut jboolean,
        ) -> jvmtiError,
    >,
    pub GetAllStackTraces: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            max_frame_count: jint,
            stack_info_ptr: *mut *mut jvmtiStackInfo,
            thread_count_ptr: *mut jint,
        ) -> jvmtiError,
    >,
    pub GetThreadListStackTraces: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread_count: jint,
            thread_list: *const jthread,
            max_frame_count: jint,
            stack_info_ptr: *mut *mut jvmtiStackInfo,
        ) -> jvmtiError,
    >,
    pub GetThreadLocalStorage: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            data_ptr: *mut *mut ::std::os::raw::c_void,
        ) -> jvmtiError,
    >,
    pub SetThreadLocalStorage: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            data: *const ::std::os::raw::c_void,
        ) -> jvmtiError,
    >,
    pub GetStackTrace: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            start_depth: jint,
            max_frame_count: jint,
            frame_buffer: *mut jvmtiFrameInfo,
            count_ptr: *mut jint,
        ) -> jvmtiError,
    >,
    pub reserved105: *mut ::std::os::raw::c_void,
    pub GetTag: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            object: jobject,
            tag_ptr: *mut jlong,
        ) -> jvmtiError,
    >,
    pub SetTag: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, object: jobject, tag: jlong) -> jvmtiError,
    >,
    pub ForceGarbageCollection:
        ::std::option::Option<unsafe extern "C" fn(env: *mut jvmtiEnv) -> jvmtiError>,
    pub IterateOverObjectsReachableFromObject: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            object: jobject,
            object_reference_callback: jvmtiObjectReferenceCallback,
            user_data: *const ::std::os::raw::c_void,
        ) -> jvmtiError,
    >,
    pub IterateOverReachableObjects: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            heap_root_callback: jvmtiHeapRootCallback,
            stack_ref_callback: jvmtiStackReferenceCallback,
            object_ref_callback: jvmtiObjectReferenceCallback,
            user_data: *const ::std::os::raw::c_void,
        ) -> jvmtiError,
    >,
    pub IterateOverHeap: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            object_filter: jvmtiHeapObjectFilter,
            heap_object_callback: jvmtiHeapObjectCallback,
            user_data: *const ::std::os::raw::c_void,
        ) -> jvmtiError,
    >,
    pub IterateOverInstancesOfClass: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            object_filter: jvmtiHeapObjectFilter,
            heap_object_callback: jvmtiHeapObjectCallback,
            user_data: *const ::std::os::raw::c_void,
        ) -> jvmtiError,
    >,
    pub reserved113: *mut ::std::os::raw::c_void,
    pub GetObjectsWithTags: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            tag_count: jint,
            tags: *const jlong,
            count_ptr: *mut jint,
            object_result_ptr: *mut *mut jobject,
            tag_result_ptr: *mut *mut jlong,
        ) -> jvmtiError,
    >,
    pub FollowReferences: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            heap_filter: jint,
            klass: jclass,
            initial_object: jobject,
            callbacks: *const jvmtiHeapCallbacks,
            user_data: *const ::std::os::raw::c_void,
        ) -> jvmtiError,
    >,
    pub IterateThroughHeap: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            heap_filter: jint,
            klass: jclass,
            callbacks: *const jvmtiHeapCallbacks,
            user_data: *const ::std::os::raw::c_void,
        ) -> jvmtiError,
    >,
    pub reserved117: *mut ::std::os::raw::c_void,
    pub reserved118: *mut ::std::os::raw::c_void,
    pub reserved119: *mut ::std::os::raw::c_void,
    pub SetJNIFunctionTable: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            function_table: *const jniNativeInterface,
        ) -> jvmtiError,
    >,
    pub GetJNIFunctionTable: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            function_table: *mut *mut jniNativeInterface,
        ) -> jvmtiError,
    >,
    pub SetEventCallbacks: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            callbacks: *const jvmtiEventCallbacks,
            size_of_callbacks: jint,
        ) -> jvmtiError,
    >,
    pub GenerateEvents: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, event_type: jvmtiEvent) -> jvmtiError,
    >,
    pub GetExtensionFunctions: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            extension_count_ptr: *mut jint,
            extensions: *mut *mut jvmtiExtensionFunctionInfo,
        ) -> jvmtiError,
    >,
    pub GetExtensionEvents: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            extension_count_ptr: *mut jint,
            extensions: *mut *mut jvmtiExtensionEventInfo,
        ) -> jvmtiError,
    >,
    pub SetExtensionEventCallback: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            extension_event_index: jint,
            callback: jvmtiExtensionEvent,
        ) -> jvmtiError,
    >,
    pub DisposeEnvironment:
        ::std::option::Option<unsafe extern "C" fn(env: *mut jvmtiEnv) -> jvmtiError>,
    pub GetErrorName: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            error: jvmtiError,
            name_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> jvmtiError,
    >,
    pub GetJLocationFormat: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            format_ptr: *mut jvmtiJlocationFormat,
        ) -> jvmtiError,
    >,
    pub GetSystemProperties: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            count_ptr: *mut jint,
            property_ptr: *mut *mut *mut ::std::os::raw::c_char,
        ) -> jvmtiError,
    >,
    pub GetSystemProperty: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            property: *const ::std::os::raw::c_char,
            value_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> jvmtiError,
    >,
    pub SetSystemProperty: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            property: *const ::std::os::raw::c_char,
            value_ptr: *const ::std::os::raw::c_char,
        ) -> jvmtiError,
    >,
    pub GetPhase: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, phase_ptr: *mut jvmtiPhase) -> jvmtiError,
    >,
    pub GetCurrentThreadCpuTimerInfo: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, info_ptr: *mut jvmtiTimerInfo) -> jvmtiError,
    >,
    pub GetCurrentThreadCpuTime: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, nanos_ptr: *mut jlong) -> jvmtiError,
    >,
    pub GetThreadCpuTimerInfo: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, info_ptr: *mut jvmtiTimerInfo) -> jvmtiError,
    >,
    pub GetThreadCpuTime: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            nanos_ptr: *mut jlong,
        ) -> jvmtiError,
    >,
    pub GetTimerInfo: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, info_ptr: *mut jvmtiTimerInfo) -> jvmtiError,
    >,
    pub GetTime: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, nanos_ptr: *mut jlong) -> jvmtiError,
    >,
    pub GetPotentialCapabilities: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            capabilities_ptr: *mut jvmtiCapabilities,
        ) -> jvmtiError,
    >,
    pub reserved141: *mut ::std::os::raw::c_void,
    pub AddCapabilities: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            capabilities_ptr: *const jvmtiCapabilities,
        ) -> jvmtiError,
    >,
    pub RelinquishCapabilities: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            capabilities_ptr: *const jvmtiCapabilities,
        ) -> jvmtiError,
    >,
    pub GetAvailableProcessors: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, processor_count_ptr: *mut jint) -> jvmtiError,
    >,
    pub GetClassVersionNumbers: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            minor_version_ptr: *mut jint,
            major_version_ptr: *mut jint,
        ) -> jvmtiError,
    >,
    pub GetConstantPool: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            constant_pool_count_ptr: *mut jint,
            constant_pool_byte_count_ptr: *mut jint,
            constant_pool_bytes_ptr: *mut *mut ::std::os::raw::c_uchar,
        ) -> jvmtiError,
    >,
    pub GetEnvironmentLocalStorage: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            data_ptr: *mut *mut ::std::os::raw::c_void,
        ) -> jvmtiError,
    >,
    pub SetEnvironmentLocalStorage: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, data: *const ::std::os::raw::c_void) -> jvmtiError,
    >,
    pub AddToBootstrapClassLoaderSearch: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            segment: *const ::std::os::raw::c_char,
        ) -> jvmtiError,
    >,
    pub SetVerboseFlag: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            flag: jvmtiVerboseFlag,
            value: jboolean,
        ) -> jvmtiError,
    >,
    pub AddToSystemClassLoaderSearch: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            segment: *const ::std::os::raw::c_char,
        ) -> jvmtiError,
    >,
    pub RetransformClasses: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            class_count: jint,
            classes: *const jclass,
        ) -> jvmtiError,
    >,
    pub GetOwnedMonitorStackDepthInfo: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            monitor_info_count_ptr: *mut jint,
            monitor_info_ptr: *mut *mut jvmtiMonitorStackDepthInfo,
        ) -> jvmtiError,
    >,
    pub GetObjectSize: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            object: jobject,
            size_ptr: *mut jlong,
        ) -> jvmtiError,
    >,
    pub GetLocalInstance: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            depth: jint,
            value_ptr: *mut jobject,
        ) -> jvmtiError,
    >,
    pub SetHeapSamplingInterval: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, sampling_interval: jint) -> jvmtiError,
    >,
}
#[test]
fn bindgen_test_layout_jvmtiInterface_1_() {
    assert_eq!(
        ::std::mem::size_of::<jvmtiInterface_1_>(),
        1248usize,
        concat!("Size of: ", stringify!(jvmtiInterface_1_))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiInterface_1_>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiInterface_1_))
    );
    fn test_field_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(reserved1)
            )
        );
    }
    test_field_reserved1();
    fn test_field_SetEventNotificationMode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetEventNotificationMode) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(SetEventNotificationMode)
            )
        );
    }
    test_field_SetEventNotificationMode();
    fn test_field_GetAllModules() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetAllModules) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetAllModules)
            )
        );
    }
    test_field_GetAllModules();
    fn test_field_GetAllThreads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetAllThreads) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetAllThreads)
            )
        );
    }
    test_field_GetAllThreads();
    fn test_field_SuspendThread() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SuspendThread) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(SuspendThread)
            )
        );
    }
    test_field_SuspendThread();
    fn test_field_ResumeThread() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ResumeThread) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(ResumeThread)
            )
        );
    }
    test_field_ResumeThread();
    fn test_field_StopThread() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).StopThread) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(StopThread)
            )
        );
    }
    test_field_StopThread();
    fn test_field_InterruptThread() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InterruptThread) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(InterruptThread)
            )
        );
    }
    test_field_InterruptThread();
    fn test_field_GetThreadInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetThreadInfo) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetThreadInfo)
            )
        );
    }
    test_field_GetThreadInfo();
    fn test_field_GetOwnedMonitorInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOwnedMonitorInfo) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetOwnedMonitorInfo)
            )
        );
    }
    test_field_GetOwnedMonitorInfo();
    fn test_field_GetCurrentContendedMonitor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetCurrentContendedMonitor) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetCurrentContendedMonitor)
            )
        );
    }
    test_field_GetCurrentContendedMonitor();
    fn test_field_RunAgentThread() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RunAgentThread) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(RunAgentThread)
            )
        );
    }
    test_field_RunAgentThread();
    fn test_field_GetTopThreadGroups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTopThreadGroups) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetTopThreadGroups)
            )
        );
    }
    test_field_GetTopThreadGroups();
    fn test_field_GetThreadGroupInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetThreadGroupInfo) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetThreadGroupInfo)
            )
        );
    }
    test_field_GetThreadGroupInfo();
    fn test_field_GetThreadGroupChildren() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetThreadGroupChildren) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetThreadGroupChildren)
            )
        );
    }
    test_field_GetThreadGroupChildren();
    fn test_field_GetFrameCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetFrameCount) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetFrameCount)
            )
        );
    }
    test_field_GetFrameCount();
    fn test_field_GetThreadState() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetThreadState) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetThreadState)
            )
        );
    }
    test_field_GetThreadState();
    fn test_field_GetCurrentThread() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetCurrentThread) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetCurrentThread)
            )
        );
    }
    test_field_GetCurrentThread();
    fn test_field_GetFrameLocation() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetFrameLocation) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetFrameLocation)
            )
        );
    }
    test_field_GetFrameLocation();
    fn test_field_NotifyFramePop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NotifyFramePop) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(NotifyFramePop)
            )
        );
    }
    test_field_NotifyFramePop();
    fn test_field_GetLocalObject() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetLocalObject) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetLocalObject)
            )
        );
    }
    test_field_GetLocalObject();
    fn test_field_GetLocalInt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetLocalInt) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetLocalInt)
            )
        );
    }
    test_field_GetLocalInt();
    fn test_field_GetLocalLong() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetLocalLong) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetLocalLong)
            )
        );
    }
    test_field_GetLocalLong();
    fn test_field_GetLocalFloat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetLocalFloat) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetLocalFloat)
            )
        );
    }
    test_field_GetLocalFloat();
    fn test_field_GetLocalDouble() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetLocalDouble) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetLocalDouble)
            )
        );
    }
    test_field_GetLocalDouble();
    fn test_field_SetLocalObject() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetLocalObject) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(SetLocalObject)
            )
        );
    }
    test_field_SetLocalObject();
    fn test_field_SetLocalInt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetLocalInt) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(SetLocalInt)
            )
        );
    }
    test_field_SetLocalInt();
    fn test_field_SetLocalLong() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetLocalLong) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(SetLocalLong)
            )
        );
    }
    test_field_SetLocalLong();
    fn test_field_SetLocalFloat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetLocalFloat) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(SetLocalFloat)
            )
        );
    }
    test_field_SetLocalFloat();
    fn test_field_SetLocalDouble() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetLocalDouble) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(SetLocalDouble)
            )
        );
    }
    test_field_SetLocalDouble();
    fn test_field_CreateRawMonitor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateRawMonitor) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(CreateRawMonitor)
            )
        );
    }
    test_field_CreateRawMonitor();
    fn test_field_DestroyRawMonitor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DestroyRawMonitor) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(DestroyRawMonitor)
            )
        );
    }
    test_field_DestroyRawMonitor();
    fn test_field_RawMonitorEnter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RawMonitorEnter) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(RawMonitorEnter)
            )
        );
    }
    test_field_RawMonitorEnter();
    fn test_field_RawMonitorExit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RawMonitorExit) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(RawMonitorExit)
            )
        );
    }
    test_field_RawMonitorExit();
    fn test_field_RawMonitorWait() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RawMonitorWait) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(RawMonitorWait)
            )
        );
    }
    test_field_RawMonitorWait();
    fn test_field_RawMonitorNotify() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RawMonitorNotify) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(RawMonitorNotify)
            )
        );
    }
    test_field_RawMonitorNotify();
    fn test_field_RawMonitorNotifyAll() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RawMonitorNotifyAll) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(RawMonitorNotifyAll)
            )
        );
    }
    test_field_RawMonitorNotifyAll();
    fn test_field_SetBreakpoint() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetBreakpoint) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(SetBreakpoint)
            )
        );
    }
    test_field_SetBreakpoint();
    fn test_field_ClearBreakpoint() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClearBreakpoint) as usize - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(ClearBreakpoint)
            )
        );
    }
    test_field_ClearBreakpoint();
    fn test_field_GetNamedModule() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetNamedModule) as usize - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetNamedModule)
            )
        );
    }
    test_field_GetNamedModule();
    fn test_field_SetFieldAccessWatch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetFieldAccessWatch) as usize - ptr as usize
            },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(SetFieldAccessWatch)
            )
        );
    }
    test_field_SetFieldAccessWatch();
    fn test_field_ClearFieldAccessWatch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClearFieldAccessWatch) as usize - ptr as usize
            },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(ClearFieldAccessWatch)
            )
        );
    }
    test_field_ClearFieldAccessWatch();
    fn test_field_SetFieldModificationWatch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetFieldModificationWatch) as usize - ptr as usize
            },
            336usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(SetFieldModificationWatch)
            )
        );
    }
    test_field_SetFieldModificationWatch();
    fn test_field_ClearFieldModificationWatch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClearFieldModificationWatch) as usize - ptr as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(ClearFieldModificationWatch)
            )
        );
    }
    test_field_ClearFieldModificationWatch();
    fn test_field_IsModifiableClass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsModifiableClass) as usize - ptr as usize
            },
            352usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(IsModifiableClass)
            )
        );
    }
    test_field_IsModifiableClass();
    fn test_field_Allocate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Allocate) as usize - ptr as usize
            },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(Allocate)
            )
        );
    }
    test_field_Allocate();
    fn test_field_Deallocate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Deallocate) as usize - ptr as usize
            },
            368usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(Deallocate)
            )
        );
    }
    test_field_Deallocate();
    fn test_field_GetClassSignature() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetClassSignature) as usize - ptr as usize
            },
            376usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetClassSignature)
            )
        );
    }
    test_field_GetClassSignature();
    fn test_field_GetClassStatus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetClassStatus) as usize - ptr as usize
            },
            384usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetClassStatus)
            )
        );
    }
    test_field_GetClassStatus();
    fn test_field_GetSourceFileName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSourceFileName) as usize - ptr as usize
            },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetSourceFileName)
            )
        );
    }
    test_field_GetSourceFileName();
    fn test_field_GetClassModifiers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetClassModifiers) as usize - ptr as usize
            },
            400usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetClassModifiers)
            )
        );
    }
    test_field_GetClassModifiers();
    fn test_field_GetClassMethods() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetClassMethods) as usize - ptr as usize
            },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetClassMethods)
            )
        );
    }
    test_field_GetClassMethods();
    fn test_field_GetClassFields() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetClassFields) as usize - ptr as usize
            },
            416usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetClassFields)
            )
        );
    }
    test_field_GetClassFields();
    fn test_field_GetImplementedInterfaces() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetImplementedInterfaces) as usize - ptr as usize
            },
            424usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetImplementedInterfaces)
            )
        );
    }
    test_field_GetImplementedInterfaces();
    fn test_field_IsInterface() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsInterface) as usize - ptr as usize
            },
            432usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(IsInterface)
            )
        );
    }
    test_field_IsInterface();
    fn test_field_IsArrayClass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsArrayClass) as usize - ptr as usize
            },
            440usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(IsArrayClass)
            )
        );
    }
    test_field_IsArrayClass();
    fn test_field_GetClassLoader() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetClassLoader) as usize - ptr as usize
            },
            448usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetClassLoader)
            )
        );
    }
    test_field_GetClassLoader();
    fn test_field_GetObjectHashCode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetObjectHashCode) as usize - ptr as usize
            },
            456usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetObjectHashCode)
            )
        );
    }
    test_field_GetObjectHashCode();
    fn test_field_GetObjectMonitorUsage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetObjectMonitorUsage) as usize - ptr as usize
            },
            464usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetObjectMonitorUsage)
            )
        );
    }
    test_field_GetObjectMonitorUsage();
    fn test_field_GetFieldName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetFieldName) as usize - ptr as usize
            },
            472usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetFieldName)
            )
        );
    }
    test_field_GetFieldName();
    fn test_field_GetFieldDeclaringClass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetFieldDeclaringClass) as usize - ptr as usize
            },
            480usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetFieldDeclaringClass)
            )
        );
    }
    test_field_GetFieldDeclaringClass();
    fn test_field_GetFieldModifiers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetFieldModifiers) as usize - ptr as usize
            },
            488usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetFieldModifiers)
            )
        );
    }
    test_field_GetFieldModifiers();
    fn test_field_IsFieldSynthetic() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsFieldSynthetic) as usize - ptr as usize
            },
            496usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(IsFieldSynthetic)
            )
        );
    }
    test_field_IsFieldSynthetic();
    fn test_field_GetMethodName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetMethodName) as usize - ptr as usize
            },
            504usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetMethodName)
            )
        );
    }
    test_field_GetMethodName();
    fn test_field_GetMethodDeclaringClass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetMethodDeclaringClass) as usize - ptr as usize
            },
            512usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetMethodDeclaringClass)
            )
        );
    }
    test_field_GetMethodDeclaringClass();
    fn test_field_GetMethodModifiers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetMethodModifiers) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetMethodModifiers)
            )
        );
    }
    test_field_GetMethodModifiers();
    fn test_field_reserved67() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved67) as usize - ptr as usize
            },
            528usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(reserved67)
            )
        );
    }
    test_field_reserved67();
    fn test_field_GetMaxLocals() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetMaxLocals) as usize - ptr as usize
            },
            536usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetMaxLocals)
            )
        );
    }
    test_field_GetMaxLocals();
    fn test_field_GetArgumentsSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetArgumentsSize) as usize - ptr as usize
            },
            544usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetArgumentsSize)
            )
        );
    }
    test_field_GetArgumentsSize();
    fn test_field_GetLineNumberTable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetLineNumberTable) as usize - ptr as usize
            },
            552usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetLineNumberTable)
            )
        );
    }
    test_field_GetLineNumberTable();
    fn test_field_GetMethodLocation() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetMethodLocation) as usize - ptr as usize
            },
            560usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetMethodLocation)
            )
        );
    }
    test_field_GetMethodLocation();
    fn test_field_GetLocalVariableTable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetLocalVariableTable) as usize - ptr as usize
            },
            568usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetLocalVariableTable)
            )
        );
    }
    test_field_GetLocalVariableTable();
    fn test_field_SetNativeMethodPrefix() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetNativeMethodPrefix) as usize - ptr as usize
            },
            576usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(SetNativeMethodPrefix)
            )
        );
    }
    test_field_SetNativeMethodPrefix();
    fn test_field_SetNativeMethodPrefixes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetNativeMethodPrefixes) as usize - ptr as usize
            },
            584usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(SetNativeMethodPrefixes)
            )
        );
    }
    test_field_SetNativeMethodPrefixes();
    fn test_field_GetBytecodes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetBytecodes) as usize - ptr as usize
            },
            592usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetBytecodes)
            )
        );
    }
    test_field_GetBytecodes();
    fn test_field_IsMethodNative() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsMethodNative) as usize - ptr as usize
            },
            600usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(IsMethodNative)
            )
        );
    }
    test_field_IsMethodNative();
    fn test_field_IsMethodSynthetic() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsMethodSynthetic) as usize - ptr as usize
            },
            608usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(IsMethodSynthetic)
            )
        );
    }
    test_field_IsMethodSynthetic();
    fn test_field_GetLoadedClasses() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetLoadedClasses) as usize - ptr as usize
            },
            616usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetLoadedClasses)
            )
        );
    }
    test_field_GetLoadedClasses();
    fn test_field_GetClassLoaderClasses() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetClassLoaderClasses) as usize - ptr as usize
            },
            624usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetClassLoaderClasses)
            )
        );
    }
    test_field_GetClassLoaderClasses();
    fn test_field_PopFrame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PopFrame) as usize - ptr as usize
            },
            632usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(PopFrame)
            )
        );
    }
    test_field_PopFrame();
    fn test_field_ForceEarlyReturnObject() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ForceEarlyReturnObject) as usize - ptr as usize
            },
            640usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(ForceEarlyReturnObject)
            )
        );
    }
    test_field_ForceEarlyReturnObject();
    fn test_field_ForceEarlyReturnInt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ForceEarlyReturnInt) as usize - ptr as usize
            },
            648usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(ForceEarlyReturnInt)
            )
        );
    }
    test_field_ForceEarlyReturnInt();
    fn test_field_ForceEarlyReturnLong() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ForceEarlyReturnLong) as usize - ptr as usize
            },
            656usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(ForceEarlyReturnLong)
            )
        );
    }
    test_field_ForceEarlyReturnLong();
    fn test_field_ForceEarlyReturnFloat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ForceEarlyReturnFloat) as usize - ptr as usize
            },
            664usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(ForceEarlyReturnFloat)
            )
        );
    }
    test_field_ForceEarlyReturnFloat();
    fn test_field_ForceEarlyReturnDouble() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ForceEarlyReturnDouble) as usize - ptr as usize
            },
            672usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(ForceEarlyReturnDouble)
            )
        );
    }
    test_field_ForceEarlyReturnDouble();
    fn test_field_ForceEarlyReturnVoid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ForceEarlyReturnVoid) as usize - ptr as usize
            },
            680usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(ForceEarlyReturnVoid)
            )
        );
    }
    test_field_ForceEarlyReturnVoid();
    fn test_field_RedefineClasses() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RedefineClasses) as usize - ptr as usize
            },
            688usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(RedefineClasses)
            )
        );
    }
    test_field_RedefineClasses();
    fn test_field_GetVersionNumber() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetVersionNumber) as usize - ptr as usize
            },
            696usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetVersionNumber)
            )
        );
    }
    test_field_GetVersionNumber();
    fn test_field_GetCapabilities() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetCapabilities) as usize - ptr as usize
            },
            704usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetCapabilities)
            )
        );
    }
    test_field_GetCapabilities();
    fn test_field_GetSourceDebugExtension() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSourceDebugExtension) as usize - ptr as usize
            },
            712usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetSourceDebugExtension)
            )
        );
    }
    test_field_GetSourceDebugExtension();
    fn test_field_IsMethodObsolete() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsMethodObsolete) as usize - ptr as usize
            },
            720usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(IsMethodObsolete)
            )
        );
    }
    test_field_IsMethodObsolete();
    fn test_field_SuspendThreadList() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SuspendThreadList) as usize - ptr as usize
            },
            728usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(SuspendThreadList)
            )
        );
    }
    test_field_SuspendThreadList();
    fn test_field_ResumeThreadList() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ResumeThreadList) as usize - ptr as usize
            },
            736usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(ResumeThreadList)
            )
        );
    }
    test_field_ResumeThreadList();
    fn test_field_AddModuleReads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddModuleReads) as usize - ptr as usize
            },
            744usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(AddModuleReads)
            )
        );
    }
    test_field_AddModuleReads();
    fn test_field_AddModuleExports() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddModuleExports) as usize - ptr as usize
            },
            752usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(AddModuleExports)
            )
        );
    }
    test_field_AddModuleExports();
    fn test_field_AddModuleOpens() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddModuleOpens) as usize - ptr as usize
            },
            760usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(AddModuleOpens)
            )
        );
    }
    test_field_AddModuleOpens();
    fn test_field_AddModuleUses() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddModuleUses) as usize - ptr as usize
            },
            768usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(AddModuleUses)
            )
        );
    }
    test_field_AddModuleUses();
    fn test_field_AddModuleProvides() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddModuleProvides) as usize - ptr as usize
            },
            776usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(AddModuleProvides)
            )
        );
    }
    test_field_AddModuleProvides();
    fn test_field_IsModifiableModule() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsModifiableModule) as usize - ptr as usize
            },
            784usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(IsModifiableModule)
            )
        );
    }
    test_field_IsModifiableModule();
    fn test_field_GetAllStackTraces() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetAllStackTraces) as usize - ptr as usize
            },
            792usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetAllStackTraces)
            )
        );
    }
    test_field_GetAllStackTraces();
    fn test_field_GetThreadListStackTraces() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetThreadListStackTraces) as usize - ptr as usize
            },
            800usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetThreadListStackTraces)
            )
        );
    }
    test_field_GetThreadListStackTraces();
    fn test_field_GetThreadLocalStorage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetThreadLocalStorage) as usize - ptr as usize
            },
            808usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetThreadLocalStorage)
            )
        );
    }
    test_field_GetThreadLocalStorage();
    fn test_field_SetThreadLocalStorage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetThreadLocalStorage) as usize - ptr as usize
            },
            816usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(SetThreadLocalStorage)
            )
        );
    }
    test_field_SetThreadLocalStorage();
    fn test_field_GetStackTrace() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStackTrace) as usize - ptr as usize
            },
            824usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetStackTrace)
            )
        );
    }
    test_field_GetStackTrace();
    fn test_field_reserved105() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved105) as usize - ptr as usize
            },
            832usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(reserved105)
            )
        );
    }
    test_field_reserved105();
    fn test_field_GetTag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTag) as usize - ptr as usize
            },
            840usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetTag)
            )
        );
    }
    test_field_GetTag();
    fn test_field_SetTag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetTag) as usize - ptr as usize
            },
            848usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(SetTag)
            )
        );
    }
    test_field_SetTag();
    fn test_field_ForceGarbageCollection() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ForceGarbageCollection) as usize - ptr as usize
            },
            856usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(ForceGarbageCollection)
            )
        );
    }
    test_field_ForceGarbageCollection();
    fn test_field_IterateOverObjectsReachableFromObject() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IterateOverObjectsReachableFromObject) as usize
                    - ptr as usize
            },
            864usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(IterateOverObjectsReachableFromObject)
            )
        );
    }
    test_field_IterateOverObjectsReachableFromObject();
    fn test_field_IterateOverReachableObjects() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IterateOverReachableObjects) as usize - ptr as usize
            },
            872usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(IterateOverReachableObjects)
            )
        );
    }
    test_field_IterateOverReachableObjects();
    fn test_field_IterateOverHeap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IterateOverHeap) as usize - ptr as usize
            },
            880usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(IterateOverHeap)
            )
        );
    }
    test_field_IterateOverHeap();
    fn test_field_IterateOverInstancesOfClass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IterateOverInstancesOfClass) as usize - ptr as usize
            },
            888usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(IterateOverInstancesOfClass)
            )
        );
    }
    test_field_IterateOverInstancesOfClass();
    fn test_field_reserved113() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved113) as usize - ptr as usize
            },
            896usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(reserved113)
            )
        );
    }
    test_field_reserved113();
    fn test_field_GetObjectsWithTags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetObjectsWithTags) as usize - ptr as usize
            },
            904usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetObjectsWithTags)
            )
        );
    }
    test_field_GetObjectsWithTags();
    fn test_field_FollowReferences() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FollowReferences) as usize - ptr as usize
            },
            912usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(FollowReferences)
            )
        );
    }
    test_field_FollowReferences();
    fn test_field_IterateThroughHeap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IterateThroughHeap) as usize - ptr as usize
            },
            920usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(IterateThroughHeap)
            )
        );
    }
    test_field_IterateThroughHeap();
    fn test_field_reserved117() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved117) as usize - ptr as usize
            },
            928usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(reserved117)
            )
        );
    }
    test_field_reserved117();
    fn test_field_reserved118() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved118) as usize - ptr as usize
            },
            936usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(reserved118)
            )
        );
    }
    test_field_reserved118();
    fn test_field_reserved119() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved119) as usize - ptr as usize
            },
            944usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(reserved119)
            )
        );
    }
    test_field_reserved119();
    fn test_field_SetJNIFunctionTable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetJNIFunctionTable) as usize - ptr as usize
            },
            952usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(SetJNIFunctionTable)
            )
        );
    }
    test_field_SetJNIFunctionTable();
    fn test_field_GetJNIFunctionTable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetJNIFunctionTable) as usize - ptr as usize
            },
            960usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetJNIFunctionTable)
            )
        );
    }
    test_field_GetJNIFunctionTable();
    fn test_field_SetEventCallbacks() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetEventCallbacks) as usize - ptr as usize
            },
            968usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(SetEventCallbacks)
            )
        );
    }
    test_field_SetEventCallbacks();
    fn test_field_GenerateEvents() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GenerateEvents) as usize - ptr as usize
            },
            976usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GenerateEvents)
            )
        );
    }
    test_field_GenerateEvents();
    fn test_field_GetExtensionFunctions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetExtensionFunctions) as usize - ptr as usize
            },
            984usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetExtensionFunctions)
            )
        );
    }
    test_field_GetExtensionFunctions();
    fn test_field_GetExtensionEvents() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetExtensionEvents) as usize - ptr as usize
            },
            992usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetExtensionEvents)
            )
        );
    }
    test_field_GetExtensionEvents();
    fn test_field_SetExtensionEventCallback() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetExtensionEventCallback) as usize - ptr as usize
            },
            1000usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(SetExtensionEventCallback)
            )
        );
    }
    test_field_SetExtensionEventCallback();
    fn test_field_DisposeEnvironment() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisposeEnvironment) as usize - ptr as usize
            },
            1008usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(DisposeEnvironment)
            )
        );
    }
    test_field_DisposeEnvironment();
    fn test_field_GetErrorName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetErrorName) as usize - ptr as usize
            },
            1016usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetErrorName)
            )
        );
    }
    test_field_GetErrorName();
    fn test_field_GetJLocationFormat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetJLocationFormat) as usize - ptr as usize
            },
            1024usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetJLocationFormat)
            )
        );
    }
    test_field_GetJLocationFormat();
    fn test_field_GetSystemProperties() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSystemProperties) as usize - ptr as usize
            },
            1032usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetSystemProperties)
            )
        );
    }
    test_field_GetSystemProperties();
    fn test_field_GetSystemProperty() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSystemProperty) as usize - ptr as usize
            },
            1040usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetSystemProperty)
            )
        );
    }
    test_field_GetSystemProperty();
    fn test_field_SetSystemProperty() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetSystemProperty) as usize - ptr as usize
            },
            1048usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(SetSystemProperty)
            )
        );
    }
    test_field_SetSystemProperty();
    fn test_field_GetPhase() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetPhase) as usize - ptr as usize
            },
            1056usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetPhase)
            )
        );
    }
    test_field_GetPhase();
    fn test_field_GetCurrentThreadCpuTimerInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetCurrentThreadCpuTimerInfo) as usize - ptr as usize
            },
            1064usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetCurrentThreadCpuTimerInfo)
            )
        );
    }
    test_field_GetCurrentThreadCpuTimerInfo();
    fn test_field_GetCurrentThreadCpuTime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetCurrentThreadCpuTime) as usize - ptr as usize
            },
            1072usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetCurrentThreadCpuTime)
            )
        );
    }
    test_field_GetCurrentThreadCpuTime();
    fn test_field_GetThreadCpuTimerInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetThreadCpuTimerInfo) as usize - ptr as usize
            },
            1080usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetThreadCpuTimerInfo)
            )
        );
    }
    test_field_GetThreadCpuTimerInfo();
    fn test_field_GetThreadCpuTime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetThreadCpuTime) as usize - ptr as usize
            },
            1088usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetThreadCpuTime)
            )
        );
    }
    test_field_GetThreadCpuTime();
    fn test_field_GetTimerInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTimerInfo) as usize - ptr as usize
            },
            1096usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetTimerInfo)
            )
        );
    }
    test_field_GetTimerInfo();
    fn test_field_GetTime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTime) as usize - ptr as usize
            },
            1104usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetTime)
            )
        );
    }
    test_field_GetTime();
    fn test_field_GetPotentialCapabilities() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetPotentialCapabilities) as usize - ptr as usize
            },
            1112usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetPotentialCapabilities)
            )
        );
    }
    test_field_GetPotentialCapabilities();
    fn test_field_reserved141() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved141) as usize - ptr as usize
            },
            1120usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(reserved141)
            )
        );
    }
    test_field_reserved141();
    fn test_field_AddCapabilities() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddCapabilities) as usize - ptr as usize
            },
            1128usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(AddCapabilities)
            )
        );
    }
    test_field_AddCapabilities();
    fn test_field_RelinquishCapabilities() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RelinquishCapabilities) as usize - ptr as usize
            },
            1136usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(RelinquishCapabilities)
            )
        );
    }
    test_field_RelinquishCapabilities();
    fn test_field_GetAvailableProcessors() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetAvailableProcessors) as usize - ptr as usize
            },
            1144usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetAvailableProcessors)
            )
        );
    }
    test_field_GetAvailableProcessors();
    fn test_field_GetClassVersionNumbers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetClassVersionNumbers) as usize - ptr as usize
            },
            1152usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetClassVersionNumbers)
            )
        );
    }
    test_field_GetClassVersionNumbers();
    fn test_field_GetConstantPool() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetConstantPool) as usize - ptr as usize
            },
            1160usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetConstantPool)
            )
        );
    }
    test_field_GetConstantPool();
    fn test_field_GetEnvironmentLocalStorage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetEnvironmentLocalStorage) as usize - ptr as usize
            },
            1168usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetEnvironmentLocalStorage)
            )
        );
    }
    test_field_GetEnvironmentLocalStorage();
    fn test_field_SetEnvironmentLocalStorage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetEnvironmentLocalStorage) as usize - ptr as usize
            },
            1176usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(SetEnvironmentLocalStorage)
            )
        );
    }
    test_field_SetEnvironmentLocalStorage();
    fn test_field_AddToBootstrapClassLoaderSearch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddToBootstrapClassLoaderSearch) as usize - ptr as usize
            },
            1184usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(AddToBootstrapClassLoaderSearch)
            )
        );
    }
    test_field_AddToBootstrapClassLoaderSearch();
    fn test_field_SetVerboseFlag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetVerboseFlag) as usize - ptr as usize
            },
            1192usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(SetVerboseFlag)
            )
        );
    }
    test_field_SetVerboseFlag();
    fn test_field_AddToSystemClassLoaderSearch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddToSystemClassLoaderSearch) as usize - ptr as usize
            },
            1200usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(AddToSystemClassLoaderSearch)
            )
        );
    }
    test_field_AddToSystemClassLoaderSearch();
    fn test_field_RetransformClasses() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RetransformClasses) as usize - ptr as usize
            },
            1208usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(RetransformClasses)
            )
        );
    }
    test_field_RetransformClasses();
    fn test_field_GetOwnedMonitorStackDepthInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOwnedMonitorStackDepthInfo) as usize - ptr as usize
            },
            1216usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetOwnedMonitorStackDepthInfo)
            )
        );
    }
    test_field_GetOwnedMonitorStackDepthInfo();
    fn test_field_GetObjectSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetObjectSize) as usize - ptr as usize
            },
            1224usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetObjectSize)
            )
        );
    }
    test_field_GetObjectSize();
    fn test_field_GetLocalInstance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetLocalInstance) as usize - ptr as usize
            },
            1232usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(GetLocalInstance)
            )
        );
    }
    test_field_GetLocalInstance();
    fn test_field_SetHeapSamplingInterval() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<jvmtiInterface_1_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetHeapSamplingInterval) as usize - ptr as usize
            },
            1240usize,
            concat!(
                "Offset of field: ",
                stringify!(jvmtiInterface_1_),
                "::",
                stringify!(SetHeapSamplingInterval)
            )
        );
    }
    test_field_SetHeapSamplingInterval();
}
pub type jvmtiInterface_1 = jvmtiInterface_1_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jvmtiEnv {
    pub functions: *const jvmtiInterface_1_,
}
#[test]
fn bindgen_test_layout__jvmtiEnv() {
    assert_eq!(
        ::std::mem::size_of::<_jvmtiEnv>(),
        8usize,
        concat!("Size of: ", stringify!(_jvmtiEnv))
    );
    assert_eq!(
        ::std::mem::align_of::<_jvmtiEnv>(),
        8usize,
        concat!("Alignment of ", stringify!(_jvmtiEnv))
    );
    fn test_field_functions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_jvmtiEnv>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).functions) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_jvmtiEnv),
                "::",
                stringify!(functions)
            )
        );
    }
    test_field_functions();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
